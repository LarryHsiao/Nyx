Index: app/src/main/java/com/larryhsiao/nyx/jot/JotContentFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.larryhsiao.nyx.jot;\r\n\r\nimport android.app.AlertDialog;\r\nimport android.app.DatePickerDialog;\r\nimport android.content.ClipData;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.location.Address;\r\nimport android.location.Location;\r\nimport android.media.MediaMetadataRetriever;\r\nimport android.net.Uri;\r\nimport android.os.Bundle;\r\nimport android.os.Handler;\r\nimport android.os.HandlerThread;\r\nimport android.text.Editable;\r\nimport android.text.InputType;\r\nimport android.text.TextWatcher;\r\nimport android.view.LayoutInflater;\r\nimport android.view.Menu;\r\nimport android.view.MenuInflater;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.ArrayAdapter;\r\nimport android.widget.AutoCompleteTextView;\r\nimport android.widget.EditText;\r\nimport android.widget.FrameLayout;\r\nimport android.widget.GridView;\r\nimport android.widget.ImageView;\r\nimport android.widget.TextView;\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.appcompat.widget.PopupMenu;\r\nimport androidx.exifinterface.media.ExifInterface;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentManager;\r\nimport androidx.swiperefreshlayout.widget.CircularProgressDrawable;\r\nimport com.bumptech.glide.Glide;\r\nimport com.google.android.material.chip.Chip;\r\nimport com.google.android.material.chip.ChipGroup;\r\nimport com.google.gson.Gson;\r\nimport com.larryhsiao.nyx.BuildConfig;\r\nimport com.larryhsiao.nyx.LocationString;\r\nimport com.larryhsiao.nyx.R;\r\nimport com.larryhsiao.nyx.attachments.AttachmentPickerIntent;\r\nimport com.larryhsiao.nyx.attachments.AttachmentsFragment;\r\nimport com.larryhsiao.nyx.base.JotFragment;\r\nimport com.larryhsiao.nyx.core.attachments.Attachment;\r\nimport com.larryhsiao.nyx.core.attachments.AttachmentsByJotId;\r\nimport com.larryhsiao.nyx.core.attachments.NewAttachment;\r\nimport com.larryhsiao.nyx.core.attachments.QueriedAttachments;\r\nimport com.larryhsiao.nyx.core.attachments.RemovalAttachment;\r\nimport com.larryhsiao.nyx.core.attachments.RemovalAttachmentByJotId;\r\nimport com.larryhsiao.nyx.core.jots.ConstJot;\r\nimport com.larryhsiao.nyx.core.jots.Jot;\r\nimport com.larryhsiao.nyx.core.jots.JotRemoval;\r\nimport com.larryhsiao.nyx.core.jots.JotUri;\r\nimport com.larryhsiao.nyx.core.jots.PostedJot;\r\nimport com.larryhsiao.nyx.core.jots.WrappedJot;\r\nimport com.larryhsiao.nyx.core.jots.moods.DefaultMoods;\r\nimport com.larryhsiao.nyx.core.jots.moods.MergedMoods;\r\nimport com.larryhsiao.nyx.core.jots.moods.RankedMood;\r\nimport com.larryhsiao.nyx.core.jots.moods.RankedMoods;\r\nimport com.larryhsiao.nyx.core.tags.AllTags;\r\nimport com.larryhsiao.nyx.core.tags.JotTagRemoval;\r\nimport com.larryhsiao.nyx.core.tags.NewJotTag;\r\nimport com.larryhsiao.nyx.core.tags.NewTag;\r\nimport com.larryhsiao.nyx.core.tags.QueriedTags;\r\nimport com.larryhsiao.nyx.core.tags.Tag;\r\nimport com.larryhsiao.nyx.core.tags.TagsByJotId;\r\nimport com.larryhsiao.nyx.core.tags.TagsByKeyword;\r\nimport com.larryhsiao.nyx.sync.SyncService;\r\nimport com.larryhsiao.nyx.util.EmbedMapFragment;\r\nimport com.linkedin.urls.Url;\r\nimport com.linkedin.urls.detection.UrlDetector;\r\nimport com.schibstedspain.leku.LocationPickerActivity;\r\nimport com.silverhetch.aura.BackControl;\r\nimport com.silverhetch.aura.images.exif.ExifAttribute;\r\nimport com.silverhetch.aura.images.exif.ExifUnixTimeStamp;\r\nimport com.silverhetch.aura.location.LocationAddress;\r\nimport com.silverhetch.aura.uri.UriMimeType;\r\nimport com.silverhetch.aura.view.alert.Alert;\r\nimport com.silverhetch.aura.view.dialog.FullScreenDialogFragment;\r\nimport com.silverhetch.aura.view.dialog.InputDialog;\r\nimport com.silverhetch.aura.view.fab.FabBehavior;\r\nimport com.silverhetch.clotho.source.ConstSource;\r\nimport com.stfalcon.imageviewer.StfalconImageViewer;\r\nimport io.github.ponnamkarthik.richlinkpreview.MetaData;\r\nimport io.github.ponnamkarthik.richlinkpreview.ResponseListener;\r\nimport io.github.ponnamkarthik.richlinkpreview.RichPreview;\r\n\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.Calendar;\r\nimport java.util.Collections;\r\nimport java.util.Date;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.TimeZone;\r\nimport java.util.stream.Collectors;\r\n\r\nimport static android.app.Activity.RESULT_OK;\r\nimport static android.content.Intent.ACTION_VIEW;\r\nimport static android.content.Intent.FLAG_GRANT_READ_URI_PERMISSION;\r\nimport static android.view.View.GONE;\r\nimport static android.view.View.VISIBLE;\r\nimport static androidx.appcompat.app.AlertDialog.Builder;\r\nimport static androidx.exifinterface.media.ExifInterface.TAG_DATETIME_ORIGINAL;\r\nimport static androidx.swiperefreshlayout.widget.CircularProgressDrawable.LARGE;\r\nimport static com.linkedin.urls.detection.UrlDetectorOptions.Default;\r\nimport static com.schibstedspain.leku.LocationPickerActivityKt.ADDRESS;\r\nimport static com.schibstedspain.leku.LocationPickerActivityKt.LATITUDE;\r\nimport static com.schibstedspain.leku.LocationPickerActivityKt.LONGITUDE;\r\nimport static java.lang.Double.MIN_VALUE;\r\nimport static java.util.Calendar.ZONE_OFFSET;\r\n\r\n/**\r\n * Fragment that shows the Jot content.\r\n *\r\n * @todo #0 One click touch template jot with geometry, and some pictures.\r\n * @todo #0 Survey capture image, video and audio in app or use third-party apps.\r\n * @todo #0 Handle removing http url will still touch new attachment.\r\n * @todo #0 Loading progress for loading preview url image.\r\n */\r\npublic class JotContentFragment extends JotFragment implements BackControl {\r\n    private static final int REQUEST_CODE_LOCATION_PICKER = 1000;\r\n    private static final int REQUEST_CODE_PICK_FILE = 1001;\r\n    private static final int REQUEST_CODE_INPUT_CUSTOM_MOOD = 1002;\r\n    private static final int REQUEST_CODE_ALERT = 1003;\r\n    private static final int REQUEST_CODE_ATTACHMENT_DIALOG = 1004;\r\n\r\n    private static final String ARG_JOT_JSON = \"ARG_JOT\";\r\n    private static final String ARG_ATTACHMENT_URI = \"ARG_ATTACHMENT_URI\";\r\n    private static final String ARG_REQUEST_CODE = \"ARG_REQUEST_CODE\";\r\n    private List<Uri> attachmentOnView = new ArrayList<>();\r\n    private Handler mainHandler = new Handler();\r\n    private HandlerThread backgroundThread;\r\n    private Handler backgroundHandler;\r\n    private ChipGroup chipGroup;\r\n    private TextView dateText;\r\n    private TextView locationText;\r\n    private TextView moodText;\r\n    private Jot jot;\r\n\r\n    public static Fragment newInstance() {\r\n        return newInstance(\r\n            new ConstJot(\r\n                -1,\r\n                \"\",\r\n                System.currentTimeMillis(),\r\n                new double[]{MIN_VALUE, MIN_VALUE},\r\n                \"\",\r\n                1,\r\n                false\r\n            ),\r\n            new ArrayList<>(),\r\n            0\r\n        );\r\n    }\r\n\r\n    public static Fragment newInstance(Jot jot) {\r\n        return newInstance(jot, new ArrayList<>(), 0);\r\n    }\r\n\r\n    public static Fragment newInstance(Jot jot, int requestCode) {\r\n        return newInstance(jot, new ArrayList<>(), requestCode);\r\n    }\r\n\r\n    public static Fragment newInstance(Jot jot, ArrayList<String> uris, int requestCode) {\r\n        final Fragment frag = new JotContentFragment();\r\n        Bundle args = new Bundle();\r\n        args.putString(ARG_JOT_JSON, new Gson().toJson(jot));\r\n        args.putStringArrayList(ARG_ATTACHMENT_URI, uris);\r\n        args.putInt(ARG_REQUEST_CODE, requestCode);\r\n        frag.setArguments(args);\r\n        return frag;\r\n    }\r\n\r\n    @Override\r\n    public void onDestroy() {\r\n        super.onDestroy();\r\n        backgroundThread.quitSafely();\r\n        backgroundThread.interrupt();\r\n    }\r\n\r\n    @Override\r\n    public void onCreate(@Nullable Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        backgroundThread = new HandlerThread(\"ContentBackground\");\r\n        backgroundThread.start();\r\n        backgroundHandler = new Handler(backgroundThread.getLooper());\r\n        setHasOptionsMenu(true);\r\n        if (getArguments() != null) {\r\n            jot = new Gson().fromJson(\r\n                getArguments().getString(ARG_JOT_JSON, \"{}\"),\r\n                ConstJot.class\r\n            );\r\n        } else {\r\n            jot = new ConstJot(\r\n                -1,\r\n                \"\",\r\n                System.currentTimeMillis(),\r\n                new double[]{MIN_VALUE, MIN_VALUE},\r\n                \"\",\r\n                1,\r\n                false\r\n            );\r\n        }\r\n    }\r\n\r\n    @Nullable\r\n    @Override\r\n    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\r\n        return inflater.inflate(R.layout.page_jot, container, false);\r\n    }\r\n\r\n    @Override\r\n    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\r\n        super.onViewCreated(view, savedInstanceState);\r\n        dateText = view.findViewById(R.id.jot_date);\r\n        dateText.setOnClickListener(v -> {\r\n            DatePickerDialog dialog = new DatePickerDialog(view.getContext());\r\n            dialog.setOnDateSetListener((view1, year, month, dayOfMonth) -> {\r\n                jot = new WrappedJot(jot) {\r\n                    @Override\r\n                    public long createdTime() {\r\n                        Calendar calendar = Calendar.getInstance();\r\n                        calendar.set(year, month, dayOfMonth);\r\n                        return calendar.getTimeInMillis();\r\n                    }\r\n                };\r\n                updateDateIndicator();\r\n            });\r\n            dialog.show();\r\n        });\r\n        updateDateIndicator();\r\n        chipGroup = view.findViewById(R.id.jot_tagGroup);\r\n        EditText contentEditText = view.findViewById(R.id.jot_content);\r\n        contentEditText.setText(jot.content());\r\n        contentEditText.addTextChangedListener(new TextWatcher() {\r\n            @Override\r\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {\r\n                // Leave it empty\r\n            }\r\n\r\n            @Override\r\n            public void onTextChanged(CharSequence s, int start, int before, int count) {\r\n                // Leave it empty\r\n            }\r\n\r\n            @Override\r\n            public void afterTextChanged(Editable s) {\r\n                jot = new WrappedJot(jot) {\r\n                    @Override\r\n                    public String content() {\r\n                        return s.toString();\r\n                    }\r\n                };\r\n                mainHandler.removeCallbacks(handler);\r\n                if (contentEditText.getText().toString().endsWith(\"\\n\")) {\r\n                    mainHandler.postDelayed(handler, 1000);\r\n                }\r\n            }\r\n\r\n            private final Runnable handler = () -> {\r\n                List<Url> detect = new UrlDetector(\r\n                    contentEditText.getText().toString(),\r\n                    Default\r\n                ).detect();\r\n                if (detect.size() > 0) {\r\n                    addAttachment(\r\n                        Uri.parse(detect.get(detect.size() - 1).toString()),\r\n                        () -> {\r\n                        }\r\n                    );\r\n                    updateAttachmentView();\r\n                }\r\n            };\r\n        });\r\n        locationText = view.findViewById(R.id.jot_location);\r\n        locationText.setOnClickListener(v -> pickLocation());\r\n        Location location = new Location(\"Constant\");\r\n        location.setLongitude(jot.location()[0]);\r\n        location.setLatitude(jot.location()[1]);\r\n        updateAddress(location);\r\n        loadEmbedMapByJot();\r\n        attachmentOnView.clear();\r\n        attachmentOnView.addAll(\r\n            new QueriedAttachments(new AttachmentsByJotId(db, jot.id()))\r\n                .value()\r\n                .stream()\r\n                .map(it -> Uri.parse(it.uri()))\r\n                .collect(Collectors.toList())\r\n        );\r\n\r\n        if (getArguments() != null) {\r\n            final List<String> attachments = getArguments().getStringArrayList(ARG_ATTACHMENT_URI);\r\n            if (attachments != null) {\r\n                for (String uri : attachments) {\r\n                    addAttachmentGrantPermission(Uri.parse(uri));\r\n                }\r\n                updateAttachmentView();\r\n            }\r\n        }\r\n\r\n        ImageView tagIcon = view.findViewById(R.id.jot_tagIcon);\r\n        tagIcon.setOnClickListener(v -> {\r\n            final AutoCompleteTextView editText = new AutoCompleteTextView(v.getContext());\r\n            editText.setLines(1);\r\n            editText.setMaxLines(1);\r\n            editText.setInputType(InputType.TYPE_CLASS_TEXT);\r\n            editText.setAdapter(new ArrayAdapter<>(\r\n                    v.getContext(),\r\n                    android.R.layout.simple_dropdown_item_1line,\r\n                    new QueriedTags(\r\n                        new AllTags(db)\r\n                    ).value().stream().map(Tag::title).collect(Collectors.toList())\r\n                )\r\n            );\r\n            new AlertDialog.Builder(v.getContext())\r\n                .setTitle(getString(R.string.new_tag))\r\n                .setMessage(getString(R.string.enter_tag_name))\r\n                .setView(editText)\r\n                .setPositiveButton(R.string.confirm, (dialog, which) -> {\r\n                    final String preferTagName = editText.getText().toString();\r\n                    Tag tag = null;\r\n                    for (Tag searched : new QueriedTags(new TagsByKeyword(db, preferTagName)).value()) {\r\n                        if (searched.title().equals(preferTagName)) {\r\n                            tag = searched;\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (tag == null) {\r\n                        tag = new NewTag(db, editText.getText().toString()).value();\r\n                    }\r\n                    final Chip tagChip = new Chip(v.getContext());\r\n                    tagChip.setText(tag.title());\r\n                    tagChip.setLines(1);\r\n                    tagChip.setMaxLines(1);\r\n                    tagChip.setTag(tag);\r\n                    tagChip.setOnClickListener(v1 -> tagChipClicked(tagChip));\r\n                    chipGroup.addView(tagChip);\r\n                })\r\n                .setNegativeButton(R.string.cancel, null)\r\n                .create().show();\r\n        });\r\n\r\n        for (Tag tag : new QueriedTags(new TagsByJotId(db, jot.id())).value()) {\r\n            Chip chip = new Chip(view.getContext());\r\n            chip.setTag(tag);\r\n            chip.setText(tag.title());\r\n            chip.setOnClickListener(v -> new AlertDialog.Builder(v.getContext())\r\n                .setTitle(tag.title())\r\n                .setMessage(R.string.delete)\r\n                .setPositiveButton(R.string.confirm, (dialog, which) ->\r\n                    chipGroup.removeView(v)\r\n                )\r\n                .setNegativeButton(R.string.cancel, null)\r\n                .show());\r\n            chipGroup.addView(chip);\r\n        }\r\n        moodText = view.findViewById(R.id.jot_mood);\r\n\r\n        String mood = String.valueOf(jot.mood());\r\n        if (mood.isEmpty()) {\r\n            mood = \"+\";\r\n        }\r\n        moodText.setText(mood);\r\n        moodText.setOnClickListener(v -> {\r\n            final GridView gridView = new GridView(v.getContext());\r\n            gridView.setNumColumns(4);\r\n            gridView.setAdapter(\r\n                new MoodAdapter(\r\n                    v.getContext(),\r\n                    new MergedMoods(\r\n                        new ConstSource<>(\r\n                            new RankedMoods(db).value()\r\n                                .stream()\r\n                                .map(RankedMood::mood)\r\n                                .collect(Collectors.toList())\r\n                        ),\r\n                        new DefaultMoods()\r\n                    ).value()\r\n                )\r\n            );\r\n            AlertDialog moodDialog = new AlertDialog.Builder(v.getContext())\r\n                .setTitle(getString(R.string.moods))\r\n                .setNegativeButton(R.string.cancel, (dialog, which) -> {\r\n                })\r\n                .setView(gridView)\r\n                .show();\r\n            gridView.setOnItemClickListener((parent, view12, position, id) -> {\r\n                if (position == gridView.getAdapter().getCount() - 1) { // last custom dialog\r\n                    moodDialog.dismiss();\r\n                    InputDialog dialog = InputDialog.Companion.newInstance(\r\n                        getString(R.string.moods),\r\n                        REQUEST_CODE_INPUT_CUSTOM_MOOD\r\n                    );\r\n                    dialog.setTargetFragment(this, REQUEST_CODE_INPUT_CUSTOM_MOOD);\r\n                    dialog.show(getFragmentManager(), null);\r\n                    return;\r\n                }\r\n                final String newMood;\r\n                if (position == 0) {\r\n                    newMood = \"+\";\r\n                } else {\r\n                    newMood = ((TextView) view12).getText().toString();\r\n                }\r\n                jot = new WrappedJot(jot) {\r\n                    @Override\r\n                    public String mood() {\r\n                        return newMood;\r\n                    }\r\n                };\r\n                moodText.setText(newMood);\r\n                moodDialog.dismiss();\r\n            });\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        super.onResume();\r\n        attachFab(new FabBehavior() {\r\n            @Override\r\n            public int icon() {\r\n                return R.drawable.ic_save;\r\n            }\r\n\r\n            @Override\r\n            public void onClick() {\r\n                save();\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public void onPause() {\r\n        super.onPause();\r\n        detachFab();\r\n    }\r\n\r\n    private void updateAddress(Location location) {\r\n        backgroundHandler.post(() -> {\r\n            final String value = new LocationString(\r\n                new LocationAddress(locationText.getContext(), location).value()\r\n            ).value();\r\n            locationText.post(() -> locationText.setText(value));\r\n        });\r\n    }\r\n\r\n    private void pickLocation() {\r\n        LocationPickerActivity.Builder build = new LocationPickerActivity.Builder();\r\n        if (!Arrays.equals(jot.location(), new double[]{MIN_VALUE, MIN_VALUE})\r\n            && !Arrays.equals(jot.location(), new double[]{0.0, 0.0})) {\r\n            build.withLocation(jot.location()[1], jot.location()[0]);\r\n        }\r\n        startActivityForResult(\r\n            build.build(getContext()),\r\n            REQUEST_CODE_LOCATION_PICKER\r\n        );\r\n    }\r\n\r\n    private void tagChipClicked(Chip tagChip) {\r\n        new AlertDialog.Builder(getContext())\r\n            .setTitle(tagChip.getText().toString())\r\n            .setAdapter(new ArrayAdapter<>(\r\n                getContext(),\r\n                android.R.layout.simple_list_item_1,\r\n                new String[]{\r\n                    getString(R.string.delete)\r\n                }\r\n            ), (dialog1, which1) -> onTagOptionClicked(tagChip, which1))\r\n            .show();\r\n    }\r\n\r\n    private void onTagOptionClicked(Chip tagChip, int which1) {\r\n        switch (which1) {\r\n            case 0:\r\n                new AlertDialog.Builder(getContext())\r\n                    .setTitle(tagChip.getText().toString())\r\n                    .setMessage(getString(R.string.delete))\r\n                    .setPositiveButton(R.string.confirm, (dialog2, which2) ->\r\n                        chipGroup.removeView(tagChip)\r\n                    ).setNegativeButton(R.string.cancel, null)\r\n                    .show();\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    private void updateDateIndicator() {\r\n        dateText.setText(SimpleDateFormat.getDateInstance().format(new Date(jot.createdTime())));\r\n    }\r\n\r\n    @Override\r\n    public void onCreateOptionsMenu(@NonNull Menu menu, @NonNull MenuInflater inflater) {\r\n        super.onCreateOptionsMenu(menu, inflater);\r\n        inflater.inflate(R.menu.jot_edit, menu);\r\n    }\r\n\r\n    @Override\r\n    public boolean onOptionsItemSelected(@NonNull MenuItem item) {\r\n        if (item.getItemId() == R.id.menuItem_delete) {\r\n            preferDelete();\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private void save() {\r\n        jot = new PostedJot(db, jot).value();\r\n        saveAttachment();\r\n        saveTag();\r\n        SyncService.enqueue(getContext());\r\n        final Intent intent = new Intent();\r\n        intent.setData(\r\n            Uri.parse(new JotUri(BuildConfig.URI_HOST, jot).value().toASCIIString())\r\n        );\r\n        sendResult(\r\n            getArguments().getInt(ARG_REQUEST_CODE, 0),\r\n            RESULT_OK,\r\n            intent\r\n        );\r\n    }\r\n\r\n    private void saveTag() {\r\n        final Map<Long, Tag> dbTags = new QueriedTags(new TagsByJotId(db, jot.id()))\r\n            .value()\r\n            .stream()\r\n            .collect(Collectors.toMap(Tag::id, tag -> tag));\r\n        for (int i = 0; i < chipGroup.getChildCount(); i++) {\r\n            Tag tagOnView = ((Tag) chipGroup.getChildAt(i).getTag());\r\n            if (!dbTags.containsKey(tagOnView.id())) {\r\n                // update JOT TAG\r\n                new NewJotTag(\r\n                    db,\r\n                    new ConstSource<>(jot.id()),\r\n                    new ConstSource<>(tagOnView.id())\r\n                ).fire();\r\n            } else {\r\n                dbTags.remove(tagOnView.id());\r\n            }\r\n        }\r\n        dbTags.forEach((aLong, tag) -> new JotTagRemoval(db, jot.id(), tag.id()).fire());\r\n    }\r\n\r\n    private void saveAttachment() {\r\n        final List<Attachment> dbAttachments = new QueriedAttachments(\r\n            new AttachmentsByJotId(db, jot.id())\r\n        ).value();\r\n        attachmentOnView.forEach(uri -> {\r\n            boolean hasItem = false;\r\n            List<Attachment> existOnView = new ArrayList<>();\r\n            for (Attachment dbAttachment : dbAttachments) {\r\n                if (dbAttachment.uri().equals(uri.toString())) {\r\n                    hasItem = true;\r\n                    existOnView.add(dbAttachment);\r\n                }\r\n            }\r\n            dbAttachments.removeAll(existOnView);\r\n            if (!hasItem) {\r\n                new NewAttachment(db, uri.toString(), jot.id()).value();\r\n            }\r\n        });\r\n        dbAttachments.forEach((attachment) ->\r\n            new RemovalAttachment(db, attachment.id()).fire()\r\n        );\r\n    }\r\n\r\n    private void deleteFlow() {\r\n        new AlertDialog.Builder(getContext())\r\n            .setTitle(R.string.delete)\r\n            .setPositiveButton(R.string.confirm, (dialog, which) -> {\r\n                new RemovalAttachmentByJotId(db, jot.id()).fire();\r\n                new JotRemoval(db, jot.id()).fire();\r\n                getParentFragmentManager().popBackStack();\r\n            })\r\n            .setNegativeButton(R.string.cancel, null)\r\n            .show();\r\n    }\r\n\r\n    private void discardFlow() {\r\n        if (jot.id() <= 0) {\r\n            try {\r\n                new JotRemoval(db, jot.id()).fire();\r\n            } catch (Exception e) {\r\n                // make sure not have actually inserted into db\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n        if (jot instanceof WrappedJot) { // modified\r\n            new AlertDialog.Builder(getContext())\r\n                .setTitle(R.string.discard)\r\n                .setPositiveButton(R.string.confirm, (dialog, which) -> {\r\n                    getParentFragmentManager().popBackStack();\r\n                })\r\n                .setNegativeButton(R.string.cancel, null)\r\n                .show();\r\n        } else {\r\n            getParentFragmentManager().popBackStack();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {\r\n        super.onActivityResult(requestCode, resultCode, data);\r\n        if (requestCode == REQUEST_CODE_LOCATION_PICKER && resultCode == RESULT_OK) {\r\n            jot = new WrappedJot(jot) {\r\n                @Override\r\n                public double[] location() {\r\n                    return new double[]{\r\n                        data.getDoubleExtra(LONGITUDE, 0.0),\r\n                        data.getDoubleExtra(LATITUDE, 0.0)\r\n                    };\r\n                }\r\n            };\r\n            Address address = data.getParcelableExtra(ADDRESS);\r\n            locationText.setText(address == null ? \"\" : new LocationString(address).value());\r\n            loadEmbedMapByJot();\r\n        } else if (requestCode == REQUEST_CODE_PICK_FILE && resultCode == RESULT_OK) {\r\n            if (data.getData() != null) {\r\n                addAttachmentGrantPermission(data.getData());\r\n            } else {\r\n                ClipData clip = data.getClipData();\r\n                for (int i = 0; i < clip.getItemCount(); i++) {\r\n                    addAttachmentGrantPermission(clip.getItemAt(i).getUri());\r\n                }\r\n            }\r\n            updateAttachmentView();\r\n        } else if (requestCode == REQUEST_CODE_INPUT_CUSTOM_MOOD && resultCode == RESULT_OK) {\r\n            final String newMoodRaw = data.getStringExtra(\"INPUT_FIELD\");\r\n            final String newMood;\r\n            if (newMoodRaw.length() > 1) {\r\n                newMood = newMoodRaw.substring(0, 2);\r\n            } else {\r\n                newMood = \"+\";\r\n            }\r\n            moodText.setText(newMood);\r\n            jot = new WrappedJot(jot) {\r\n                @Override\r\n                public String mood() {\r\n                    return newMood;\r\n                }\r\n            };\r\n        } else if (requestCode == REQUEST_CODE_ATTACHMENT_DIALOG) {\r\n            List<Uri> uris = data.getParcelableArrayListExtra(\"ARG_ATTACHMENT_URI\");\r\n            attachmentOnView.clear();\r\n            for (Uri uri : uris) {\r\n                addAttachment(uri, this::unsupportedDialog);\r\n            }\r\n            updateAttachmentView();\r\n        }\r\n    }\r\n\r\n    private void updateAttachmentView() {\r\n        final FrameLayout root = getView().findViewById(R.id.jot_attachment_container);\r\n        final TextView newAttachment = getView().findViewById(R.id.jot_attachment_new);\r\n        newAttachment.setVisibility(VISIBLE);\r\n        newAttachment.setOnClickListener(v -> startPicker());\r\n\r\n        final TextView countText = getView().findViewById(R.id.jot_attachment_count);\r\n        countText.setVisibility(VISIBLE);\r\n        countText.setText(attachmentOnView.size() + \"\");\r\n        root.removeAllViews();\r\n\r\n        if (attachmentOnView.size() == 0) {\r\n            updateEmptyAttachment(root);\r\n            return;\r\n        }\r\n        updateAttachmentViewByMimeType(root);\r\n    }\r\n\r\n    private void updateAttachmentViewByMimeType(FrameLayout root) {\r\n        final Uri attachmentUri = attachmentOnView.get(0);\r\n        final String mimeType = new UriMimeType(\r\n            root.getContext(), attachmentUri.toString()\r\n        ).value();\r\n        if (mimeType.startsWith(\"video/\")) {\r\n            updateVideo(root, attachmentUri);\r\n        } else if (mimeType.startsWith(\"audio/\")) {\r\n            updateAudio(root, attachmentUri);\r\n        } else if (mimeType.startsWith(\"image/\")) {\r\n            updateImage(root, attachmentUri);\r\n        } else {\r\n            if (attachmentUri.toString().startsWith(\"http\")) {\r\n                updatePreview(root, attachmentUri);\r\n            } else {\r\n                updateImage(root, attachmentUri);\r\n            }\r\n        }\r\n    }\r\n\r\n    private void updatePreview(FrameLayout root, Uri attachmentUri) {\r\n        LayoutInflater.from(getContext()).inflate(\r\n            R.layout.item_attachment_link_preview,\r\n            root,\r\n            true\r\n        );\r\n        root.setOnClickListener(v -> {\r\n                if (attachmentOnView.size() > 1) {\r\n                    browseAttachments();\r\n                } else {\r\n                    root.getContext().startActivity(new Intent(ACTION_VIEW, attachmentUri));\r\n                }\r\n            }\r\n        );\r\n        root.setOnLongClickListener(v -> {\r\n                showProperties(root, attachmentUri);\r\n                return true;\r\n            }\r\n        );\r\n        RichPreview preview = new RichPreview(new ResponseListener() {\r\n            @Override\r\n            public void onData(MetaData metaData) {\r\n                ImageView icon = root.findViewById(R.id.itemAttachmentUrlPreview_icon);\r\n                Glide.with(root.getContext())\r\n                    .load(metaData.getImageurl())\r\n                    .into(icon);\r\n                TextView content = root.findViewById(R.id.itemAttachmentUrlPreview_title);\r\n                content.setText(metaData.getTitle());\r\n                TextView urlText = root.findViewById(R.id.itemAttachmentUrlPreview_urlText);\r\n                urlText.setText(metaData.getUrl());\r\n            }\r\n\r\n            @Override\r\n            public void onError(Exception e) {\r\n                // @todo #0 Error icon for loading preview failed\r\n            }\r\n        });\r\n        preview.getPreview(attachmentUri.toString());\r\n    }\r\n\r\n    private void updateEmptyAttachment(FrameLayout root) {\r\n        final TextView countText = getView().findViewById(R.id.jot_attachment_count);\r\n        countText.setVisibility(GONE);\r\n        final TextView attachmentCount = getView().findViewById(R.id.jot_attachment_new);\r\n        attachmentCount.setVisibility(GONE);\r\n        LayoutInflater.from(root.getContext()).inflate(\r\n            R.layout.item_add_attachment,\r\n            root\r\n        ).setOnClickListener(it -> startPicker());\r\n    }\r\n\r\n    private void startPicker() {\r\n        startActivityForResult(\r\n            new AttachmentPickerIntent().value(),\r\n            REQUEST_CODE_PICK_FILE\r\n        );\r\n    }\r\n\r\n    private void updateVideo(FrameLayout root, Uri uri) {\r\n        LayoutInflater.from(getContext())\r\n            .inflate(R.layout.item_attachment_video, root, true);\r\n        MediaMetadataRetriever mmr = new MediaMetadataRetriever();\r\n        mmr.setDataSource(root.getContext(), uri);\r\n        ImageView imageView = root.findViewById(R.id.itemAttachmentVideo_icon);\r\n        imageView.setImageBitmap(mmr.getFrameAtTime());\r\n        imageView.setOnClickListener(v -> {\r\n            if (attachmentOnView.size() > 1) {\r\n                browseAttachments();\r\n            } else {\r\n                final Intent intent = new Intent(ACTION_VIEW);\r\n                intent.setDataAndType(uri, \"video/*\");\r\n                intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\r\n                intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);\r\n                startActivity(intent);\r\n            }\r\n        });\r\n        imageView.setOnLongClickListener(v -> {\r\n            showProperties(v, uri);\r\n            return true;\r\n        });\r\n        mmr.release();\r\n    }\r\n\r\n    private void updateAudio(FrameLayout root, Uri uri) {\r\n        LayoutInflater.from(getContext())\r\n            .inflate(R.layout.item_attachment_audio, root, true);\r\n        ImageView imageView = root.findViewById(R.id.itemAttachmentAudio_icon);\r\n        imageView.setOnClickListener(v -> {\r\n            if (attachmentOnView.size() > 1) {\r\n                browseAttachments();\r\n            } else {\r\n                final Intent intent = new Intent(ACTION_VIEW);\r\n                intent.setDataAndType(uri, \"audio/*\");\r\n                intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\r\n                intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);\r\n                startActivity(intent);\r\n            }\r\n        });\r\n        imageView.setOnLongClickListener(v -> {\r\n            showProperties(v, uri);\r\n            return true;\r\n        });\r\n    }\r\n\r\n    private void updateImage(FrameLayout root, Uri uri) {\r\n        LayoutInflater.from(getContext())\r\n            .inflate(R.layout.item_attachment_image, root, true);\r\n        final ImageView icon = root.findViewById(R.id.itemAttachmentImage_icon);\r\n        CircularProgressDrawable progress = new CircularProgressDrawable(icon.getContext());\r\n        progress.setStyle(LARGE);\r\n        Glide.with(root.getContext()).load(uri).into(icon);\r\n        icon.setOnClickListener(v -> {\r\n            if (attachmentOnView.size() > 1) {\r\n                browseAttachments();\r\n            } else {\r\n                showImage(root.getContext(), uri);\r\n            }\r\n        });\r\n        icon.setOnLongClickListener(v -> {\r\n            showProperties(v, uri);\r\n            return true;\r\n        });\r\n    }\r\n\r\n    private void browseAttachments() {\r\n        FullScreenDialogFragment dialog = AttachmentsFragment.newInstance(attachmentOnView);\r\n        dialog.setTargetFragment(this, REQUEST_CODE_ATTACHMENT_DIALOG);\r\n        dialog.show(getParentFragmentManager(), null);\r\n    }\r\n\r\n    private void showImage(Context context, Uri uri) {\r\n        new StfalconImageViewer.Builder<>(\r\n            context,\r\n            Collections.singletonList(uri),\r\n            (imageView, image) -> {\r\n                CircularProgressDrawable progress2 = new CircularProgressDrawable(\r\n                    context\r\n                );\r\n                progress2.setStyle(LARGE);\r\n                Glide.with(imageView.getContext())\r\n                    .load(image)\r\n                    .placeholder(progress2)\r\n                    .into(imageView);\r\n            }\r\n        ).show();\r\n    }\r\n\r\n    private void showProperties(View view, Uri uri) {\r\n        final PopupMenu popup = new PopupMenu(view.getContext(), view);\r\n        popup.getMenu().add(R.string.delete).setOnMenuItemClickListener(item -> {\r\n            attachmentOnView.remove(uri);\r\n            updateAttachmentView();\r\n            return true;\r\n        });\r\n        popup.getMenu()\r\n            .add(view.getContext().getString(R.string.properties))\r\n            .setOnMenuItemClickListener(item -> {\r\n                final androidx.appcompat.app.AlertDialog dialog = new Builder(view.getContext())\r\n                    .setView(R.layout.dialog_properties)\r\n                    .show();\r\n                ((TextView) dialog.findViewById(R.id.properties_text)).setText(\r\n                    \"Uri: \" + uri.toString()\r\n                );\r\n                return true;\r\n            });\r\n        popup.show();\r\n    }\r\n\r\n    private void addAttachmentGrantPermission(Uri uri) {\r\n        try {\r\n            getContext().getContentResolver().takePersistableUriPermission(\r\n                uri,\r\n                FLAG_GRANT_READ_URI_PERMISSION\r\n            );\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        addAttachment(uri, this::unsupportedDialog);\r\n    }\r\n\r\n    private void unsupportedDialog() {\r\n        Alert.Companion.newInstance(\r\n            REQUEST_CODE_ALERT,\r\n            getString(R.string.not_supported_file)\r\n        ).show(getChildFragmentManager(), null);\r\n    }\r\n\r\n    private void addAttachment(Uri uri, Runnable unsupportedCallback) {\r\n        if (attachmentOnView.contains(uri)) {\r\n            return;\r\n        }\r\n        final String mimeType = new UriMimeType(getContext(), uri.toString()).value();\r\n        if (mimeType.startsWith(\"image\")) {\r\n            updateJotWithExif(uri);\r\n            attachmentOnView.add(uri);\r\n        } else if (mimeType.startsWith(\"video\")) {\r\n            attachmentOnView.add(uri);\r\n        } else if (mimeType.startsWith(\"audio\")) {\r\n            attachmentOnView.add(uri);\r\n        } else {\r\n            if (uri.toString().startsWith(\"http\")) {\r\n                attachmentOnView.add(uri);\r\n            } else {\r\n                unsupportedCallback.run();\r\n            }\r\n        }\r\n    }\r\n\r\n    private void updateJotWithExif(Uri data) {\r\n        try {\r\n            final ExifInterface exif = new ExifInterface(\r\n                getContext().getContentResolver().openInputStream(data)\r\n            );\r\n            updateJotLocationByExif(exif);\r\n            updateJotDateByExif(exif);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private void updateJotDateByExif(ExifInterface exif) {\r\n        final Long time = new ExifUnixTimeStamp(\r\n            new ExifAttribute(\r\n                new ConstSource<>(exif),\r\n                TAG_DATETIME_ORIGINAL\r\n            )\r\n        ).value();\r\n\r\n        // invalid time or is a created jot or there are already have attachment there,\r\n        // remains unchanged.\r\n        if (time == -1L || jot.id() != -1L || attachmentOnView.size() > 0) {\r\n            return;\r\n        }\r\n        jot = new WrappedJot(jot) {\r\n            @Override\r\n            public long createdTime() {\r\n                // @todo #0 Time zone determination for EXIF info.\r\n                TimeZone tz = TimeZone.getDefault();\r\n                return time - tz.getOffset(ZONE_OFFSET);\r\n            }\r\n        };\r\n        updateDateIndicator();\r\n    }\r\n\r\n    private void updateJotLocationByExif(ExifInterface exif) {\r\n        final double[] latLong = exif.getLatLong();\r\n        if (!Arrays.equals(jot.location(), new double[]{MIN_VALUE, MIN_VALUE})\r\n            && !Arrays.equals(jot.location(), new double[]{0.0, 0.0})\r\n            || latLong == null) {\r\n            return;\r\n        }\r\n        jot = new WrappedJot(jot) {\r\n            @Override\r\n            public double[] location() {\r\n                return new double[]{latLong[1], latLong[0]};\r\n            }\r\n        };\r\n        Location location = new Location(\"constant\");\r\n        location.setLatitude(latLong[0]);\r\n        location.setLongitude(latLong[1]);\r\n        updateAddress(location);\r\n        loadEmbedMapByJot();\r\n    }\r\n\r\n    private void loadEmbedMapByJot() {\r\n        FragmentManager mgr = getChildFragmentManager();\r\n        if (!Arrays.equals(jot.location(), new double[]{MIN_VALUE, MIN_VALUE})\r\n            && !Arrays.equals(jot.location(), new double[]{0.0, 0.0})) {\r\n            mgr.beginTransaction().replace(\r\n                R.id.jot_embedMapContainer,\r\n                EmbedMapFragment.newInstance(\r\n                    jot.location()[0],\r\n                    jot.location()[1]\r\n                )\r\n            ).commit();\r\n            getView().findViewById(R.id.jot_embedMapContainer).setVisibility(VISIBLE);\r\n        } else {\r\n            Fragment map = mgr.findFragmentById(R.id.jot_embedMapContainer);\r\n            if (map != null) {\r\n                mgr.beginTransaction().remove(map).commit();\r\n            }\r\n            getView().findViewById(R.id.jot_embedMapContainer).setVisibility(GONE);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public boolean onBackPress() {\r\n        if (jot instanceof WrappedJot) {\r\n            discardFlow();\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    private void preferDelete() {\r\n        if (jot.id() < 0) {\r\n            discardFlow();\r\n        } else {\r\n            deleteFlow();\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/larryhsiao/nyx/jot/JotContentFragment.java	(revision 3b6a0def3c3ba0cbecadeafefd952108a05ee77f)
+++ app/src/main/java/com/larryhsiao/nyx/jot/JotContentFragment.java	(date 1589607261699)
@@ -39,11 +39,14 @@
 import com.google.android.material.chip.Chip;
 import com.google.android.material.chip.ChipGroup;
 import com.google.gson.Gson;
+import com.google.gson.reflect.TypeToken;
 import com.larryhsiao.nyx.BuildConfig;
 import com.larryhsiao.nyx.LocationString;
 import com.larryhsiao.nyx.R;
 import com.larryhsiao.nyx.attachments.AttachmentPickerIntent;
 import com.larryhsiao.nyx.attachments.AttachmentsFragment;
+import com.larryhsiao.nyx.attachments.CommentedUri;
+import com.larryhsiao.nyx.attachments.ConstCommentUri;
 import com.larryhsiao.nyx.base.JotFragment;
 import com.larryhsiao.nyx.core.attachments.Attachment;
 import com.larryhsiao.nyx.core.attachments.AttachmentsByJotId;
@@ -95,6 +98,7 @@
 import java.util.Calendar;
 import java.util.Collections;
 import java.util.Date;
+import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.TimeZone;
@@ -133,7 +137,7 @@
     private static final String ARG_JOT_JSON = "ARG_JOT";
     private static final String ARG_ATTACHMENT_URI = "ARG_ATTACHMENT_URI";
     private static final String ARG_REQUEST_CODE = "ARG_REQUEST_CODE";
-    private List<Uri> attachmentOnView = new ArrayList<>();
+    private Map<String, CommentedUri> attachmentOnView = new HashMap<>();
     private Handler mainHandler = new Handler();
     private HandlerThread backgroundThread;
     private Handler backgroundHandler;
@@ -270,7 +274,10 @@
                 ).detect();
                 if (detect.size() > 0) {
                     addAttachment(
-                        Uri.parse(detect.get(detect.size() - 1).toString()),
+                        new ConstCommentUri(
+                            detect.get(detect.size() - 1).toString(),
+                            ""
+                        ),
                         () -> {
                         }
                     );
@@ -286,12 +293,12 @@
         updateAddress(location);
         loadEmbedMapByJot();
         attachmentOnView.clear();
-        attachmentOnView.addAll(
+        attachmentOnView.putAll(
             new QueriedAttachments(new AttachmentsByJotId(db, jot.id()))
                 .value()
                 .stream()
-                .map(it -> Uri.parse(it.uri()))
-                .collect(Collectors.toList())
+                .map(it -> new ConstCommentUri(it.uri(), it.comment()))
+                .collect(Collectors.toMap(ConstCommentUri::uri, it -> it))
         );
 
         if (getArguments() != null) {
@@ -550,18 +557,18 @@
         final List<Attachment> dbAttachments = new QueriedAttachments(
             new AttachmentsByJotId(db, jot.id())
         ).value();
-        attachmentOnView.forEach(uri -> {
+        attachmentOnView.values().forEach(uri -> {
             boolean hasItem = false;
             List<Attachment> existOnView = new ArrayList<>();
             for (Attachment dbAttachment : dbAttachments) {
-                if (dbAttachment.uri().equals(uri.toString())) {
+                if (dbAttachment.uri().equals(uri.uri())) {
                     hasItem = true;
                     existOnView.add(dbAttachment);
                 }
             }
             dbAttachments.removeAll(existOnView);
             if (!hasItem) {
-                new NewAttachment(db, uri.toString(), jot.id()).value();
+                new NewAttachment(db, uri.toString(), jot.id(), uri.comment()).value();
             }
         });
         dbAttachments.forEach((attachment) ->
@@ -645,10 +652,16 @@
                 }
             };
         } else if (requestCode == REQUEST_CODE_ATTACHMENT_DIALOG) {
-            List<Uri> uris = data.getParcelableArrayListExtra("ARG_ATTACHMENT_URI");
+            List<CommentedUri> uris = gson.fromJson(
+                data.getStringExtra("ARG_ATTACHMENTS"),
+                new TypeToken<List<CommentedUri>>() {
+                }.getType()
+            );
             attachmentOnView.clear();
-            for (Uri uri : uris) {
-                addAttachment(uri, this::unsupportedDialog);
+            if (uris != null) {
+                for (CommentedUri uri : uris) {
+                    addAttachment(uri, this::unsupportedDialog);
+                }
             }
             updateAttachmentView();
         }
@@ -673,7 +686,9 @@
     }
 
     private void updateAttachmentViewByMimeType(FrameLayout root) {
-        final Uri attachmentUri = attachmentOnView.get(0);
+        final Uri attachmentUri = Uri.parse(
+            attachmentOnView.values().stream().findFirst().get().uri()
+        );
         final String mimeType = new UriMimeType(
             root.getContext(), attachmentUri.toString()
         ).value();
@@ -817,7 +832,8 @@
     }
 
     private void browseAttachments() {
-        FullScreenDialogFragment dialog = AttachmentsFragment.newInstance(attachmentOnView);
+        List<CommentedUri> attachments = new ArrayList<>(attachmentOnView.values());
+        FullScreenDialogFragment dialog = AttachmentsFragment.newInstance(getContext(), attachments);
         dialog.setTargetFragment(this, REQUEST_CODE_ATTACHMENT_DIALOG);
         dialog.show(getParentFragmentManager(), null);
     }
@@ -869,7 +885,7 @@
         } catch (Exception e) {
             e.printStackTrace();
         }
-        addAttachment(uri, this::unsupportedDialog);
+        addAttachment(new ConstCommentUri(uri.toString(), ""), this::unsupportedDialog);
     }
 
     private void unsupportedDialog() {
@@ -879,21 +895,21 @@
         ).show(getChildFragmentManager(), null);
     }
 
-    private void addAttachment(Uri uri, Runnable unsupportedCallback) {
-        if (attachmentOnView.contains(uri)) {
+    private void addAttachment(CommentedUri uri, Runnable unsupportedCallback) {
+        if (attachmentOnView.containsKey(uri.uri())) {
             return;
         }
-        final String mimeType = new UriMimeType(getContext(), uri.toString()).value();
+        final String mimeType = new UriMimeType(getContext(), uri.uri()).value();
         if (mimeType.startsWith("image")) {
-            updateJotWithExif(uri);
-            attachmentOnView.add(uri);
+            updateJotWithExif(Uri.parse(uri.toString()));
+            attachmentOnView.put(uri.uri(), uri);
         } else if (mimeType.startsWith("video")) {
-            attachmentOnView.add(uri);
+            attachmentOnView.put(uri.uri(), uri);
         } else if (mimeType.startsWith("audio")) {
-            attachmentOnView.add(uri);
+            attachmentOnView.put(uri.uri(), uri);
         } else {
             if (uri.toString().startsWith("http")) {
-                attachmentOnView.add(uri);
+                attachmentOnView.put(uri.uri(), uri);
             } else {
                 unsupportedCallback.run();
             }
Index: core/src/test/java/com/larryhsiao/nyx/attachments/NewAttachmentTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.larryhsiao.nyx.attachments;\r\n\r\nimport com.larryhsiao.nyx.core.attachments.AttachmentDb;\r\nimport com.larryhsiao.nyx.core.attachments.NewAttachment;\r\nimport com.larryhsiao.nyx.core.jots.JotsDb;\r\nimport com.silverhetch.clotho.Source;\r\nimport com.silverhetch.clotho.database.h2.MemoryH2Conn;\r\nimport org.junit.jupiter.api.Assertions;\r\nimport org.junit.jupiter.api.Test;\r\n\r\nimport java.sql.Connection;\r\n\r\n/**\r\n * Test for {@link NewAttachment}\r\n */\r\npublic class NewAttachmentTest {\r\n    /**\r\n     * Check new attachment available.\r\n     */\r\n    @Test\r\n    public void checkInsert() {\r\n        final Source<Connection> db = new AttachmentDb(new JotsDb(new MemoryH2Conn()));\r\n        Assertions.assertEquals(\r\n            1L,\r\n            new NewAttachment(\r\n                db, \"Uri\", 1L\r\n            ).value().id()\r\n        );\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- core/src/test/java/com/larryhsiao/nyx/attachments/NewAttachmentTest.java	(revision 3b6a0def3c3ba0cbecadeafefd952108a05ee77f)
+++ core/src/test/java/com/larryhsiao/nyx/attachments/NewAttachmentTest.java	(date 1589562543026)
@@ -23,7 +23,7 @@
         Assertions.assertEquals(
             1L,
             new NewAttachment(
-                db, "Uri", 1L
+                db, "Uri", 1L, ""
             ).value().id()
         );
     }
Index: app/src/main/java/com/larryhsiao/nyx/attachments/AttachmentsFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.larryhsiao.nyx.attachments;\r\n\r\nimport android.content.ClipData;\r\nimport android.content.DialogInterface;\r\nimport android.content.Intent;\r\nimport android.graphics.Color;\r\nimport android.net.Uri;\r\nimport android.os.Bundle;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.recyclerview.widget.GridLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\nimport com.larryhsiao.nyx.R;\r\nimport com.larryhsiao.nyx.jot.AttachmentAdapter;\r\nimport com.silverhetch.aura.uri.UriMimeType;\r\nimport com.silverhetch.aura.view.alert.Alert;\r\nimport com.silverhetch.aura.view.dialog.FullScreenDialogFragment;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport static android.app.Activity.RESULT_OK;\r\nimport static android.content.Intent.FLAG_GRANT_READ_URI_PERMISSION;\r\n\r\n/**\r\n * Fragment that shows the attachments.\r\n *\r\n * @todo #0 Attachment sorting by created time.\r\n * @todo #0 Attachment comment in pages.\r\n * @todo #0 Preloader from Glide for RecyclerView.\r\n */\r\npublic class AttachmentsFragment extends FullScreenDialogFragment {\r\n    private static final String ARG_ATTACHMENT_URI = \"ARG_ATTACHMENT_URI\";\r\n    private static final int REQUEST_CODE_PICK_FILE = 1000;\r\n    private static final int REQUEST_CODE_ALERT = 1001;\r\n\r\n    private List<Uri> uris;\r\n    private AttachmentAdapter adapter;\r\n\r\n    public static FullScreenDialogFragment newInstance(List<Uri> uris) {\r\n        FullScreenDialogFragment frag = new AttachmentsFragment();\r\n        Bundle bundle = new Bundle();\r\n        bundle.putParcelableArrayList(ARG_ATTACHMENT_URI, new ArrayList<>(uris));\r\n        frag.setArguments(bundle);\r\n        return frag;\r\n    }\r\n\r\n    @Override\r\n    public void onCreate(@Nullable Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        uris = getArguments().getParcelableArrayList(ARG_ATTACHMENT_URI);\r\n    }\r\n\r\n    @Nullable\r\n    @Override\r\n    public View onCreateView(\r\n        @NonNull LayoutInflater inflater,\r\n        @Nullable ViewGroup container,\r\n        @Nullable Bundle savedInstanceState\r\n    ) {\r\n        return inflater.inflate(R.layout.page_attachments, container, false);\r\n    }\r\n\r\n    @Override\r\n    public void onCancel(@NonNull DialogInterface dialog) {\r\n        super.onCancel(dialog);\r\n        Intent intent = new Intent();\r\n        intent.putParcelableArrayListExtra(\r\n            ARG_ATTACHMENT_URI,\r\n            new ArrayList<>(adapter.exportUri())\r\n        );\r\n        getTargetFragment().onActivityResult(\r\n            getTargetRequestCode(),\r\n            RESULT_OK,\r\n            intent\r\n        );\r\n    }\r\n\r\n    @Override\r\n    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\r\n        super.onViewCreated(view, savedInstanceState);\r\n        RecyclerView listView = view.findViewById(R.id.list);\r\n        listView.setBackgroundColor(Color.BLACK);\r\n        listView.setAdapter(adapter = new AttachmentAdapter(view.getContext()));\r\n        final GridLayoutManager manager = new GridLayoutManager(view.getContext(), 2);\r\n        manager.setSpanSizeLookup(new GridLayoutManager.SpanSizeLookup() {\r\n            @Override\r\n            public int getSpanSize(int position) {\r\n                if (adapter.isFullSpan(position)) {\r\n                    return manager.getSpanCount();\r\n                } else {\r\n                    return 1;\r\n                }\r\n            }\r\n        });\r\n        listView.setLayoutManager(manager);\r\n        adapter.loadAttachments(uris);\r\n\r\n        view.findViewById(R.id.attachments_plus).setOnClickListener(v -> {\r\n            startActivityForResult(\r\n                new AttachmentPickerIntent().value(),\r\n                REQUEST_CODE_PICK_FILE\r\n            );\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {\r\n        super.onActivityResult(requestCode, resultCode, data);\r\n\r\n        if (requestCode == REQUEST_CODE_PICK_FILE && resultCode == RESULT_OK) {\r\n            if (data.getData() != null) {\r\n                addAttachment(data.getData());\r\n            } else {\r\n                addMultiple(data);\r\n            }\r\n        }\r\n    }\r\n\r\n    private void addMultiple(Intent data) {\r\n        ClipData clip = data.getClipData();\r\n        for (int i = 0; i < clip.getItemCount(); i++) {\r\n            addAttachment(clip.getItemAt(i).getUri());\r\n        }\r\n    }\r\n\r\n    private void addAttachment(Uri uri) {\r\n        try {\r\n            getContext().getContentResolver().takePersistableUriPermission(\r\n                uri,\r\n                FLAG_GRANT_READ_URI_PERMISSION\r\n            );\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        final String mimeType = new UriMimeType(\r\n            getContext(),\r\n            uri.toString()\r\n        ).value();\r\n        if (mimeType.startsWith(\"image\")) {\r\n            adapter.append(uri);\r\n        } else if (mimeType.startsWith(\"video\")) {\r\n            adapter.append(uri);\r\n        } else if (mimeType.startsWith(\"audio\")) {\r\n            adapter.append(uri);\r\n        } else {\r\n            Alert.Companion.newInstance(\r\n                REQUEST_CODE_ALERT,\r\n                getString(R.string.not_supported_file)\r\n            ).show(getChildFragmentManager(), null);\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/larryhsiao/nyx/attachments/AttachmentsFragment.java	(revision 3b6a0def3c3ba0cbecadeafefd952108a05ee77f)
+++ app/src/main/java/com/larryhsiao/nyx/attachments/AttachmentsFragment.java	(date 1589606914531)
@@ -1,6 +1,7 @@
 package com.larryhsiao.nyx.attachments;
 
 import android.content.ClipData;
+import android.content.Context;
 import android.content.DialogInterface;
 import android.content.Intent;
 import android.graphics.Color;
@@ -13,13 +14,13 @@
 import androidx.annotation.Nullable;
 import androidx.recyclerview.widget.GridLayoutManager;
 import androidx.recyclerview.widget.RecyclerView;
+import com.google.gson.reflect.TypeToken;
+import com.larryhsiao.nyx.JotApplication;
 import com.larryhsiao.nyx.R;
-import com.larryhsiao.nyx.jot.AttachmentAdapter;
 import com.silverhetch.aura.uri.UriMimeType;
 import com.silverhetch.aura.view.alert.Alert;
 import com.silverhetch.aura.view.dialog.FullScreenDialogFragment;
 
-import java.util.ArrayList;
 import java.util.List;
 
 import static android.app.Activity.RESULT_OK;
@@ -33,17 +34,24 @@
  * @todo #0 Preloader from Glide for RecyclerView.
  */
 public class AttachmentsFragment extends FullScreenDialogFragment {
-    private static final String ARG_ATTACHMENT_URI = "ARG_ATTACHMENT_URI";
+    private static final String ARG_ATTACHMENTS = "ARG_ATTACHMENTS";
     private static final int REQUEST_CODE_PICK_FILE = 1000;
     private static final int REQUEST_CODE_ALERT = 1001;
 
-    private List<Uri> uris;
+    private List<CommentedUri> uris;
     private AttachmentAdapter adapter;
 
-    public static FullScreenDialogFragment newInstance(List<Uri> uris) {
+    public static FullScreenDialogFragment newInstance(Context context, List<CommentedUri> uris) {
         FullScreenDialogFragment frag = new AttachmentsFragment();
         Bundle bundle = new Bundle();
-        bundle.putParcelableArrayList(ARG_ATTACHMENT_URI, new ArrayList<>(uris));
+        bundle.putString(
+            ARG_ATTACHMENTS,
+            ((JotApplication) context.getApplicationContext()).gson.toJson(
+                uris,
+                new TypeToken<List<CommentedUri>>() {
+                }.getType()
+            )
+        );
         frag.setArguments(bundle);
         return frag;
     }
@@ -51,7 +59,11 @@
     @Override
     public void onCreate(@Nullable Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        uris = getArguments().getParcelableArrayList(ARG_ATTACHMENT_URI);
+        uris = ((JotApplication) getContext().getApplicationContext()).gson.fromJson(
+            getArguments().getString(ARG_ATTACHMENTS),
+            new TypeToken<List<CommentedUri>>() {
+            }.getType()
+        );
     }
 
     @Nullable
@@ -68,9 +80,13 @@
     public void onCancel(@NonNull DialogInterface dialog) {
         super.onCancel(dialog);
         Intent intent = new Intent();
-        intent.putParcelableArrayListExtra(
-            ARG_ATTACHMENT_URI,
-            new ArrayList<>(adapter.exportUri())
+        intent.putExtra(
+            ARG_ATTACHMENTS,
+            ((JotApplication) getContext().getApplicationContext()).gson.toJson(
+                adapter.exportUri(),
+                new TypeToken<List<CommentedUri>>() {
+                }.getType()
+            )
         );
         getTargetFragment().onActivityResult(
             getTargetRequestCode(),
@@ -141,11 +157,11 @@
             uri.toString()
         ).value();
         if (mimeType.startsWith("image")) {
-            adapter.append(uri);
+            adapter.append(new ConstCommentUri(uri.toString(), ""));
         } else if (mimeType.startsWith("video")) {
-            adapter.append(uri);
+            adapter.append(new ConstCommentUri(uri.toString(), ""));
         } else if (mimeType.startsWith("audio")) {
-            adapter.append(uri);
+            adapter.append(new ConstCommentUri(uri.toString(), ""));
         } else {
             Alert.Companion.newInstance(
                 REQUEST_CODE_ALERT,
Index: app/src/main/java/com/larryhsiao/nyx/JotApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.larryhsiao.nyx;\r\n\r\nimport android.app.Application;\r\nimport android.os.Build;\r\nimport com.google.firebase.remoteconfig.FirebaseRemoteConfig;\r\nimport com.google.firebase.remoteconfig.FirebaseRemoteConfigSettings;\r\nimport com.larryhsiao.nyx.core.NyxDb;\r\nimport com.silverhetch.clotho.Source;\r\nimport com.silverhetch.clotho.database.SingleConn;\r\nimport org.flywaydb.core.api.android.ContextHolder;\r\n\r\nimport java.io.File;\r\nimport java.sql.Connection;\r\n\r\n\r\n/**\r\n * Application of Jot.\r\n */\r\npublic class JotApplication extends Application {\r\n    public static final String URI_FILE_PROVIDER = \"content://com.larryhsiao.nyx.fileprovider/attachments/\";\r\n    public static final String URI_FILE_TEMP_PROVIDER = \"content://com.larryhsiao.nyx.fileprovider/attachments_temp/\";\r\n    public long lastAuthed = 0L;\r\n    public Source<Connection> db;\r\n    public FirebaseRemoteConfig remoteConfig;\r\n\r\n    @Override\r\n    public void onCreate() {\r\n        super.onCreate();\r\n        ContextHolder.setContext(this);\r\n        File dbFile = new File(getFilesDir(), \"jot\");\r\n        db = new SingleConn(new NyxDb(dbFile));\r\n        if (\"robolectric\".equals(Build.FINGERPRINT)) {\r\n            return;\r\n        }\r\n        remoteConfig = FirebaseRemoteConfig.getInstance();\r\n        remoteConfig.setDefaultsAsync(R.xml.remote_config_defaults);\r\n        remoteConfig.setConfigSettingsAsync(\r\n            new FirebaseRemoteConfigSettings.Builder()\r\n                .setFetchTimeoutInSeconds(60)\r\n                .build()\r\n        );\r\n        remoteConfig.fetchAndActivate();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/larryhsiao/nyx/JotApplication.java	(revision 3b6a0def3c3ba0cbecadeafefd952108a05ee77f)
+++ app/src/main/java/com/larryhsiao/nyx/JotApplication.java	(date 1589563678430)
@@ -4,6 +4,10 @@
 import android.os.Build;
 import com.google.firebase.remoteconfig.FirebaseRemoteConfig;
 import com.google.firebase.remoteconfig.FirebaseRemoteConfigSettings;
+import com.google.gson.Gson;
+import com.google.gson.GsonBuilder;
+import com.larryhsiao.nyx.attachments.CommentUriAdapter;
+import com.larryhsiao.nyx.attachments.CommentedUri;
 import com.larryhsiao.nyx.core.NyxDb;
 import com.silverhetch.clotho.Source;
 import com.silverhetch.clotho.database.SingleConn;
@@ -22,12 +26,16 @@
     public long lastAuthed = 0L;
     public Source<Connection> db;
     public FirebaseRemoteConfig remoteConfig;
+    public Gson gson;
 
     @Override
     public void onCreate() {
         super.onCreate();
         ContextHolder.setContext(this);
         File dbFile = new File(getFilesDir(), "jot");
+        gson = new GsonBuilder()
+            .registerTypeAdapter(CommentedUri.class, new CommentUriAdapter())
+            .create();
         db = new SingleConn(new NyxDb(dbFile));
         if ("robolectric".equals(Build.FINGERPRINT)) {
             return;
Index: core/src/main/java/com/larryhsiao/nyx/core/attachments/NewAttachments.java
===================================================================
--- core/src/main/java/com/larryhsiao/nyx/core/attachments/NewAttachments.java	(revision 3b6a0def3c3ba0cbecadeafefd952108a05ee77f)
+++ core/src/main/java/com/larryhsiao/nyx/core/attachments/NewAttachments.java	(revision 3b6a0def3c3ba0cbecadeafefd952108a05ee77f)
@@ -1,35 +0,0 @@
-package com.larryhsiao.nyx.core.attachments;
-
-import com.silverhetch.clotho.Source;
-
-import java.sql.Connection;
-import java.util.ArrayList;
-import java.util.List;
-
-/**
- * Create multiple attachments
- */
-public class NewAttachments implements Source<List<Attachment>> {
-    private final Source<Connection> connSource;
-    private final long jotId;
-    private final String[] uris;
-
-    public NewAttachments(Source<Connection> connSource, long jotId, String[] uris) {
-        this.connSource = connSource;
-        this.jotId = jotId;
-        this.uris = uris;
-    }
-
-    @Override
-    public List<Attachment> value() {
-        List<Attachment> res = new ArrayList<>();
-        for (String uri : uris) {
-            res.add(new NewAttachment(
-                connSource,
-                uri,
-                jotId
-            ).value());
-        }
-        return res;
-    }
-}
Index: app/src/test/java/com/larryhsiao/nyx/attachments/CommentUriAdapterTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/test/java/com/larryhsiao/nyx/attachments/CommentUriAdapterTest.java	(date 1589564925563)
+++ app/src/test/java/com/larryhsiao/nyx/attachments/CommentUriAdapterTest.java	(date 1589564925563)
@@ -0,0 +1,43 @@
+package com.larryhsiao.nyx.attachments;
+
+import com.google.gson.GsonBuilder;
+import org.junit.Assert;
+import org.junit.Test;
+
+/**
+ * Unit-test for the class {@link CommentUriAdapter}
+ */
+public class CommentUriAdapterTest {
+
+    /**
+     * Check CommentedUri to Json without wrapped properties.
+     */
+    @Test
+    public void toJson() {
+        CommentedUri obj = new WrappedCommentUri(new ConstCommentUri("uri", "comment"));
+        Assert.assertEquals(
+            "{\"uri\":\"uri\",\"comment\":\"comment\"}",
+            new GsonBuilder()
+                .registerTypeAdapter(CommentedUri.class, new CommentUriAdapter())
+                .create()
+                .toJson(obj, CommentedUri.class)
+        );
+    }
+
+    /**
+     * Check CommentedUri to Json without wrapped properties.
+     */
+    @Test
+    public void fromJson() {
+        Assert.assertEquals(
+            "comment",
+            new GsonBuilder()
+                .registerTypeAdapter(CommentedUri.class, new CommentUriAdapter())
+                .create()
+                .fromJson(
+                    "{\"uri\":\"uri\",\"comment\":\"comment\"}",
+                    CommentedUri.class
+                ).comment()
+        );
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/larryhsiao/nyx/attachments/WrappedCommentUri.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/larryhsiao/nyx/attachments/WrappedCommentUri.java	(date 1589562951833)
+++ app/src/main/java/com/larryhsiao/nyx/attachments/WrappedCommentUri.java	(date 1589562951833)
@@ -0,0 +1,19 @@
+package com.larryhsiao.nyx.attachments;
+
+public class WrappedCommentUri implements CommentedUri{
+    private final CommentedUri origin;
+
+    public WrappedCommentUri(CommentedUri origin) {
+        this.origin = origin;
+    }
+
+    @Override
+    public String uri() {
+        return origin.uri();
+    }
+
+    @Override
+    public String comment() {
+        return origin.comment();
+    }
+}
Index: core/src/main/java/com/larryhsiao/nyx/core/attachments/ConstAttachment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.larryhsiao.nyx.core.attachments;\r\n\r\n/**\r\n * Constant of Attachment\r\n */\r\npublic class ConstAttachment implements Attachment {\r\n    private final long id;\r\n    private final long jotId;\r\n    private final String uri;\r\n    private final int version;\r\n    private final int delete;\r\n\r\n    public ConstAttachment(\r\n        long id,\r\n        long jotId,\r\n        String uri,\r\n        int version,\r\n        int delete\r\n    ) {\r\n        this.id = id;\r\n        this.jotId = jotId;\r\n        this.uri = uri;\r\n        this.version = version;\r\n        this.delete = delete;\r\n    }\r\n\r\n    @Override\r\n    public long jotId() {\r\n        return jotId;\r\n    }\r\n\r\n    @Override\r\n    public String uri() {\r\n        return uri;\r\n    }\r\n\r\n    @Override\r\n    public long id() {\r\n        return id;\r\n    }\r\n\r\n    @Override\r\n    public int version() {\r\n        return version;\r\n    }\r\n\r\n    @Override\r\n    public boolean deleted() {\r\n        return delete == 1;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- core/src/main/java/com/larryhsiao/nyx/core/attachments/ConstAttachment.java	(revision 3b6a0def3c3ba0cbecadeafefd952108a05ee77f)
+++ core/src/main/java/com/larryhsiao/nyx/core/attachments/ConstAttachment.java	(date 1589562406769)
@@ -9,19 +9,21 @@
     private final String uri;
     private final int version;
     private final int delete;
+    private final String comment;
 
     public ConstAttachment(
         long id,
         long jotId,
         String uri,
         int version,
-        int delete
-    ) {
+        int delete,
+        String comment) {
         this.id = id;
         this.jotId = jotId;
         this.uri = uri;
         this.version = version;
         this.delete = delete;
+        this.comment = comment;
     }
 
     @Override
@@ -48,4 +50,9 @@
     public boolean deleted() {
         return delete == 1;
     }
+
+    @Override
+    public String comment() {
+        return comment;
+    }
 }
Index: core/src/main/java/com/larryhsiao/nyx/core/attachments/Attachment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.larryhsiao.nyx.core.attachments;\r\n\r\n/**\r\n * Attachment of a Jot\r\n */\r\npublic interface Attachment {\r\n    /**\r\n     * Id of this attachment.\r\n     */\r\n    long id();\r\n\r\n    /**\r\n     * The Jot id that this attachment file attached to.\r\n     */\r\n    long jotId();\r\n\r\n    /**\r\n     * Uri of this attachment.\r\n     */\r\n    String uri();\r\n\r\n    /**\r\n     * Version of this attachment item.\r\n     */\r\n    int version();\r\n\r\n    /**\r\n     * Indicates if this attachment is deleted or not.\r\n     */\r\n    boolean deleted();\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- core/src/main/java/com/larryhsiao/nyx/core/attachments/Attachment.java	(revision 3b6a0def3c3ba0cbecadeafefd952108a05ee77f)
+++ core/src/main/java/com/larryhsiao/nyx/core/attachments/Attachment.java	(date 1589560222917)
@@ -28,4 +28,9 @@
      * Indicates if this attachment is deleted or not.
      */
     boolean deleted();
+
+    /**
+     * Comment of this attachment.
+     */
+    String comment();
 }
Index: core/src/main/java/com/larryhsiao/nyx/core/attachments/NewAttachment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.larryhsiao.nyx.core.attachments;\r\n\r\nimport com.silverhetch.clotho.Source;\r\n\r\nimport java.sql.Connection;\r\nimport java.sql.PreparedStatement;\r\nimport java.sql.ResultSet;\r\n\r\nimport static java.sql.Statement.RETURN_GENERATED_KEYS;\r\n\r\n/**\r\n * New Attachment of a Jot\r\n */\r\npublic class NewAttachment implements Source<Attachment> {\r\n    private final Source<Connection> source;\r\n    private final String uri;\r\n    private final long jotId;\r\n\r\n    public NewAttachment(Source<Connection> source, String uri, long jotId) {\r\n        this.source = source;\r\n        this.uri = uri;\r\n        this.jotId = jotId;\r\n    }\r\n\r\n    @Override\r\n    public Attachment value() {\r\n        try (PreparedStatement stmt = source.value().prepareStatement(\r\n            // language=H2\r\n            \"INSERT INTO attachments(uri, jot_id) \" +\r\n                \"VALUES (?,?)\",\r\n            RETURN_GENERATED_KEYS\r\n        )) {\r\n            stmt.setString(1, uri);\r\n            stmt.setLong(2, jotId);\r\n            stmt.executeUpdate();\r\n            final ResultSet res = stmt.getGeneratedKeys();\r\n            if (!res.next()) {\r\n                throw new IllegalArgumentException(\"Creating Attachment failed, jotId: \" + jotId + \", Uri: \" + uri);\r\n            }\r\n            return new ConstAttachment(res.getLong(1),\r\n                jotId,\r\n                uri,\r\n                1,\r\n                0\r\n            );\r\n        } catch (Exception e) {\r\n            throw new IllegalArgumentException(e);\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- core/src/main/java/com/larryhsiao/nyx/core/attachments/NewAttachment.java	(revision 3b6a0def3c3ba0cbecadeafefd952108a05ee77f)
+++ core/src/main/java/com/larryhsiao/nyx/core/attachments/NewAttachment.java	(date 1589600067184)
@@ -15,23 +15,26 @@
     private final Source<Connection> source;
     private final String uri;
     private final long jotId;
+    private final String comment;
 
-    public NewAttachment(Source<Connection> source, String uri, long jotId) {
+    public NewAttachment(Source<Connection> source, String uri, long jotId, String comment) {
         this.source = source;
         this.uri = uri;
         this.jotId = jotId;
+        this.comment = comment;
     }
 
     @Override
     public Attachment value() {
         try (PreparedStatement stmt = source.value().prepareStatement(
             // language=H2
-            "INSERT INTO attachments(uri, jot_id) " +
-                "VALUES (?,?)",
+            "INSERT INTO attachments(uri, jot_id, comment) " +
+                "VALUES (?,?,?)",
             RETURN_GENERATED_KEYS
         )) {
             stmt.setString(1, uri);
             stmt.setLong(2, jotId);
+            stmt.setString(3, comment);
             stmt.executeUpdate();
             final ResultSet res = stmt.getGeneratedKeys();
             if (!res.next()) {
@@ -41,8 +44,8 @@
                 jotId,
                 uri,
                 1,
-                0
-            );
+                0,
+                comment);
         } catch (Exception e) {
             throw new IllegalArgumentException(e);
         }
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_11\" default=\"false\" project-jdk-name=\"11\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/build/classes\" />\r\n  </component>\r\n  <component name=\"ProjectType\">\r\n    <option name=\"id\" value=\"Android\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/misc.xml	(revision 3b6a0def3c3ba0cbecadeafefd952108a05ee77f)
+++ .idea/misc.xml	(date 1589599318688)
@@ -1,5 +1,8 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
+  <component name="FrameworkDetectionExcludesConfiguration">
+    <file type="web" url="file://$PROJECT_DIR$" />
+  </component>
   <component name="ProjectRootManager" version="2" languageLevel="JDK_11" default="false" project-jdk-name="11" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/build/classes" />
   </component>
Index: core/src/main/java/com/larryhsiao/nyx/core/attachments/QueriedAttachments.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.larryhsiao.nyx.core.attachments;\r\n\r\nimport com.silverhetch.clotho.Source;\r\n\r\nimport java.sql.ResultSet;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n/**\r\n * Source to build Attachment list from query source.\r\n */\r\npublic class QueriedAttachments implements Source<List<Attachment>> {\r\n    private final Source<ResultSet> query;\r\n\r\n    public QueriedAttachments(Source<ResultSet> query) {\r\n        this.query = query;\r\n    }\r\n\r\n    @Override\r\n    public List<Attachment> value() {\r\n        try (ResultSet res = query.value()) {\r\n            List<Attachment> attachments = new ArrayList<>();\r\n            while (res.next()) {\r\n                attachments.add(new ConstAttachment(\r\n                    res.getLong(\"id\"),\r\n                    res.getLong(\"jot_id\"),\r\n                    res.getString(\"uri\"),\r\n                    res.getInt(\"version\"),\r\n                    res.getInt(\"delete\")\r\n                ));\r\n            }\r\n            return attachments;\r\n        } catch (Exception e) {\r\n            throw new IllegalArgumentException(e);\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- core/src/main/java/com/larryhsiao/nyx/core/attachments/QueriedAttachments.java	(revision 3b6a0def3c3ba0cbecadeafefd952108a05ee77f)
+++ core/src/main/java/com/larryhsiao/nyx/core/attachments/QueriedAttachments.java	(date 1589562480459)
@@ -26,8 +26,8 @@
                     res.getLong("jot_id"),
                     res.getString("uri"),
                     res.getInt("version"),
-                    res.getInt("delete")
-                ));
+                    res.getInt("delete"),
+                    res.getString("comment")));
             }
             return attachments;
         } catch (Exception e) {
Index: core/src/main/java/com/larryhsiao/nyx/core/attachments/AttachmentDb.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.larryhsiao.nyx.core.attachments;\r\n\r\nimport com.silverhetch.clotho.Source;\r\n\r\nimport java.sql.Connection;\r\n\r\n/**\r\n * Source to Build Attachment db connection\r\n */\r\npublic class AttachmentDb implements Source<Connection> {\r\n    private final Source<Connection> source;\r\n\r\n    public AttachmentDb(Source<Connection> source) {\r\n        this.source = source;\r\n    }\r\n\r\n    @Override\r\n    public Connection value() {\r\n        try {\r\n            Connection conn = source.value();\r\n            conn.createStatement().execute(\r\n                // language=H2\r\n                \"CREATE TABLE IF NOT EXISTS attachments(\" +\r\n                    \"id integer not null auto_increment, \" +\r\n                    \"uri text not null, \" +\r\n                    \"jot_id integer not null ,\" +\r\n                    \"version integer not null default 1, \" +\r\n                    \"delete integer not null default 0\" +\r\n                    \");\"\r\n            );\r\n            return conn;\r\n        } catch (Exception e) {\r\n            throw new IllegalArgumentException(e);\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- core/src/main/java/com/larryhsiao/nyx/core/attachments/AttachmentDb.java	(revision 3b6a0def3c3ba0cbecadeafefd952108a05ee77f)
+++ core/src/main/java/com/larryhsiao/nyx/core/attachments/AttachmentDb.java	(date 1589606665534)
@@ -25,7 +25,8 @@
                     "uri text not null, " +
                     "jot_id integer not null ," +
                     "version integer not null default 1, " +
-                    "delete integer not null default 0" +
+                    "delete integer not null default 0," +
+                    "comment text not null default ''" +
                     ");"
             );
             return conn;
Index: .idea/compiler.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"CompilerConfiguration\">\r\n    <bytecodeTargetLevel target=\"11\">\r\n      <module name=\"nyx-core\" target=\"1.8\" />\r\n    </bytecodeTargetLevel>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/compiler.xml	(revision 3b6a0def3c3ba0cbecadeafefd952108a05ee77f)
+++ .idea/compiler.xml	(date 1589562799796)
@@ -1,8 +1,8 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="CompilerConfiguration">
-    <bytecodeTargetLevel target="11">
-      <module name="nyx-core" target="1.8" />
+    <bytecodeTargetLevel target="1.8">
+      <module name="app" target="11" />
     </bytecodeTargetLevel>
   </component>
 </project>
\ No newline at end of file
Index: core/src/main/resources/db/migration/V4__Comment_Attachment.sql
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- core/src/main/resources/db/migration/V4__Comment_Attachment.sql	(date 1589606038211)
+++ core/src/main/resources/db/migration/V4__Comment_Attachment.sql	(date 1589606038211)
@@ -0,0 +1,1 @@
+ALTER TABLE attachments ADD COLUMN COMMENT TEXT NOT NULL DEFAULT '';
\ No newline at end of file
Index: app/src/main/res/layout/overlay_image.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/overlay_image.xml	(date 1589560073088)
+++ app/src/main/res/layout/overlay_image.xml	(date 1589560073088)
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="utf-8"?>
+<FrameLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:gravity="center|bottom"
+    android:layout_height="match_parent">
+
+    <TextView android:layout_width="match_parent"
+              android:layout_height="wrap_content"
+              android:background="#A5000000"
+              tools:text="Sample text"
+              android:gravity="center"
+              android:id="@+id/overlayImage_text"
+              android:textAppearance="@style/TextAppearance.AppCompat.Title"
+              android:layout_gravity="bottom"
+              android:padding="32dp"
+    />
+
+</FrameLayout>
\ No newline at end of file
Index: app/src/main/java/com/larryhsiao/nyx/jot/AttachmentAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.larryhsiao.nyx.jot;\r\n\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.media.MediaMetadataRetriever;\r\nimport android.net.Uri;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.ImageView;\r\nimport android.widget.TextView;\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.AlertDialog;\r\nimport androidx.appcompat.widget.PopupMenu;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\nimport androidx.swiperefreshlayout.widget.CircularProgressDrawable;\r\nimport com.bumptech.glide.Glide;\r\nimport com.larryhsiao.nyx.R;\r\nimport com.silverhetch.aura.uri.UriMimeType;\r\nimport com.silverhetch.aura.view.ViewHolder;\r\nimport com.stfalcon.imageviewer.StfalconImageViewer;\r\nimport io.github.ponnamkarthik.richlinkpreview.MetaData;\r\nimport io.github.ponnamkarthik.richlinkpreview.ResponseListener;\r\nimport io.github.ponnamkarthik.richlinkpreview.RichPreview;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.List;\r\n\r\nimport static android.content.Intent.ACTION_VIEW;\r\nimport static androidx.swiperefreshlayout.widget.CircularProgressDrawable.LARGE;\r\n\r\n/**\r\n * Adapter for displaying attachments.\r\n */\r\npublic class AttachmentAdapter extends RecyclerView.Adapter<ViewHolder> {\r\n    private static final int ITEM_TYPE_IMAGE = 1;\r\n    private static final int ITEM_TYPE_VIDEO = 2;\r\n    private static final int ITEM_TYPE_AUDIO = 3;\r\n    private static final int ITEM_TYPE_PREVIEW_URL = 4;\r\n\r\n    private final Context context;\r\n    private final List<Uri> data = new ArrayList<>();\r\n\r\n    public AttachmentAdapter(Context context) {\r\n        this.context = context;\r\n    }\r\n\r\n    @NonNull\r\n    @Override\r\n    public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n        switch (viewType) {\r\n            case ITEM_TYPE_AUDIO:\r\n                return new ViewHolder(LayoutInflater.from(parent.getContext()).inflate(\r\n                    R.layout.item_attachment_audio,\r\n                    parent,\r\n                    false\r\n                ));\r\n            case ITEM_TYPE_VIDEO:\r\n                return new ViewHolder(LayoutInflater.from(parent.getContext()).inflate(\r\n                    R.layout.item_attachment_video,\r\n                    parent,\r\n                    false\r\n                ));\r\n            case ITEM_TYPE_PREVIEW_URL:\r\n                return new ViewHolder(LayoutInflater.from(parent.getContext()).inflate(\r\n                    R.layout.item_attachment_link_preview,\r\n                    parent,\r\n                    false\r\n                ));\r\n            default:\r\n            case ITEM_TYPE_IMAGE:\r\n                return new ViewHolder(LayoutInflater.from(parent.getContext()).inflate(\r\n                    R.layout.item_attachment_image,\r\n                    parent,\r\n                    false\r\n                ));\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onBindViewHolder(@NonNull ViewHolder holder, int position) {\r\n        final Uri uri = data.get(position);\r\n        switch (getItemViewType(position)) {\r\n            default:\r\n            case ITEM_TYPE_IMAGE:\r\n                onBindImage(uri, holder, () -> showFullScreenImage(context, uri));\r\n                break;\r\n            case ITEM_TYPE_VIDEO:\r\n                onBindVideo(uri, holder);\r\n                break;\r\n            case ITEM_TYPE_AUDIO:\r\n                onBindAudio(uri, holder);\r\n                break;\r\n            case ITEM_TYPE_PREVIEW_URL:\r\n                onBindPreview(uri, holder);\r\n                break;\r\n        }\r\n    }\r\n\r\n    private void onBindPreview(Uri uri, ViewHolder holder) {\r\n        RichPreview preview = new RichPreview(new ResponseListener() {\r\n            @Override\r\n            public void onData(MetaData metaData) {\r\n                final View root = holder.getRootView();\r\n                ImageView icon = root.findViewById(R.id.itemAttachmentUrlPreview_icon);\r\n                Glide.with(icon.getContext())\r\n                    .load(metaData.getImageurl())\r\n                    .into(icon);\r\n                TextView urlText = root.findViewById(R.id.itemAttachmentUrlPreview_urlText);\r\n                urlText.setText(metaData.getUrl());\r\n                TextView title = root.findViewById(R.id.itemAttachmentUrlPreview_title);\r\n                title.setText(metaData.getTitle());\r\n                root.setOnClickListener(it ->\r\n                    it.getContext().startActivity(new Intent(ACTION_VIEW, uri))\r\n                );\r\n                root.setOnLongClickListener(it -> {\r\n                    showProperties(holder, uri);\r\n                    return true;\r\n                });\r\n            }\r\n\r\n            @Override\r\n            public void onError(Exception e) {\r\n\r\n            }\r\n        });\r\n        preview.getPreview(uri.toString());\r\n    }\r\n\r\n    private void showFullScreenImage(Context context, Uri uri) {\r\n        new StfalconImageViewer.Builder<>(\r\n            context,\r\n            Collections.singletonList(uri),\r\n            (imageView, image) -> {\r\n                CircularProgressDrawable progress2 = new CircularProgressDrawable(\r\n                    context\r\n                );\r\n                progress2.setStyle(LARGE);\r\n                Glide.with(context)\r\n                    .load(image)\r\n                    .placeholder(progress2)\r\n                    .into(imageView);\r\n            }\r\n        ).show();\r\n    }\r\n\r\n    private void onBindAudio(Uri uri, ViewHolder holder) {\r\n        ImageView imageView = holder.itemView.findViewById(R.id.itemAttachmentAudio_icon);\r\n        imageView.setOnClickListener(v -> {\r\n            final Intent intent = new Intent(ACTION_VIEW);\r\n            intent.setDataAndType(uri, \"audio/*\");\r\n            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\r\n            intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);\r\n            context.startActivity(intent);\r\n        });\r\n        imageView.setOnLongClickListener(v -> {\r\n            showProperties(holder, uri);\r\n            return true;\r\n        });\r\n    }\r\n\r\n    private void onBindVideo(Uri uri, ViewHolder holder) {\r\n        MediaMetadataRetriever mmr = new MediaMetadataRetriever();\r\n        mmr.setDataSource(context, uri);\r\n        ImageView imageView = holder.itemView.findViewById(R.id.itemAttachmentVideo_icon);\r\n        imageView.setImageBitmap(mmr.getFrameAtTime());\r\n        imageView.setOnClickListener(v -> {\r\n            final Intent intent = new Intent(ACTION_VIEW);\r\n            intent.setDataAndType(uri, \"video/*\");\r\n            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\r\n            intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);\r\n            context.startActivity(intent);\r\n        });\r\n        imageView.setOnLongClickListener(v -> {\r\n            showProperties(holder, uri);\r\n            return true;\r\n        });\r\n        mmr.release();\r\n    }\r\n\r\n    private void onBindImage(Uri uri, ViewHolder holder, Runnable onClick) {\r\n        final ImageView icon = holder.getImageView(R.id.itemAttachmentImage_icon);\r\n        CircularProgressDrawable progress = new CircularProgressDrawable(icon.getContext());\r\n        progress.setStyle(LARGE);\r\n        Glide.with(context)\r\n            .load(uri)\r\n            .into(icon);\r\n        icon.setOnClickListener(v -> {\r\n            onClick.run();\r\n        });\r\n        icon.setOnLongClickListener(v -> {\r\n            showProperties(holder, uri);\r\n            return true;\r\n        });\r\n    }\r\n\r\n    private void showProperties(ViewHolder holder, Uri uri) {\r\n        final PopupMenu popup = new PopupMenu(context, holder.itemView);\r\n        popup.getMenu().add(R.string.delete).setOnMenuItemClickListener(item -> {\r\n            int index = holder.getAdapterPosition();\r\n            data.remove(index);\r\n            notifyItemRemoved(index);\r\n            return true;\r\n        });\r\n        popup.getMenu()\r\n            .add(context.getString(R.string.properties))\r\n            .setOnMenuItemClickListener(item -> {\r\n                final AlertDialog dialog = new AlertDialog.Builder(context)\r\n                    .setView(R.layout.dialog_properties)\r\n                    .show();\r\n                ((TextView) dialog.findViewById(R.id.properties_text)).setText(\r\n                    \"Uri: \" + uri.toString()\r\n                );\r\n                return true;\r\n            });\r\n        popup.show();\r\n    }\r\n\r\n    @Override\r\n    public int getItemViewType(int position) {\r\n        final Uri uri = data.get(position);\r\n        final String mimeType = new UriMimeType(\r\n            context,\r\n            uri.toString()\r\n        ).value();\r\n        if (mimeType.startsWith(\"video\")) {\r\n            return ITEM_TYPE_VIDEO;\r\n        } else if (mimeType.startsWith(\"audio\")) {\r\n            return ITEM_TYPE_AUDIO;\r\n        } else if (mimeType.startsWith(\"image\")) {\r\n            return ITEM_TYPE_IMAGE;\r\n        } else {\r\n            if (uri.toString().startsWith(\"http\")) {\r\n                return ITEM_TYPE_PREVIEW_URL;\r\n            }\r\n            return ITEM_TYPE_IMAGE;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Determine if the given position should have full span.\r\n     */\r\n    public boolean isFullSpan(int position) {\r\n        return getItemViewType(position) == ITEM_TYPE_PREVIEW_URL;\r\n    }\r\n\r\n    @Override\r\n    public int getItemCount() {\r\n        return data.size();\r\n    }\r\n\r\n    /**\r\n     * Load attachments\r\n     */\r\n    public void loadAttachments(List<Uri> data) {\r\n        this.data.clear();\r\n        this.data.addAll(data);\r\n        notifyDataSetChanged();\r\n    }\r\n\r\n    /**\r\n     * Append an attachment to list\r\n     */\r\n    public void append(Uri uri) {\r\n        this.data.add(uri);\r\n        notifyItemInserted(data.size() - 1);\r\n    }\r\n\r\n    /**\r\n     * Export uris\r\n     */\r\n    public List<Uri> exportUri() {\r\n        return data;\r\n    }\r\n}\r\n
===================================================================
--- app/src/main/java/com/larryhsiao/nyx/jot/AttachmentAdapter.java	(revision 3b6a0def3c3ba0cbecadeafefd952108a05ee77f)
+++ app/src/main/java/com/larryhsiao/nyx/attachments/AttachmentAdapter.java	(date 1589564124327)
@@ -1,7 +1,8 @@
-package com.larryhsiao.nyx.jot;
+package com.larryhsiao.nyx.attachments;
 
 import android.content.Context;
 import android.content.Intent;
+import android.location.Location;
 import android.media.MediaMetadataRetriever;
 import android.net.Uri;
 import android.view.LayoutInflater;
@@ -12,10 +13,13 @@
 import androidx.annotation.NonNull;
 import androidx.appcompat.app.AlertDialog;
 import androidx.appcompat.widget.PopupMenu;
+import androidx.exifinterface.media.ExifInterface;
 import androidx.recyclerview.widget.RecyclerView;
 import androidx.swiperefreshlayout.widget.CircularProgressDrawable;
 import com.bumptech.glide.Glide;
+import com.larryhsiao.nyx.LocationString;
 import com.larryhsiao.nyx.R;
+import com.silverhetch.aura.location.LocationAddress;
 import com.silverhetch.aura.uri.UriMimeType;
 import com.silverhetch.aura.view.ViewHolder;
 import com.stfalcon.imageviewer.StfalconImageViewer;
@@ -40,7 +44,7 @@
     private static final int ITEM_TYPE_PREVIEW_URL = 4;
 
     private final Context context;
-    private final List<Uri> data = new ArrayList<>();
+    private final List<CommentedUri> data = new ArrayList<>();
 
     public AttachmentAdapter(Context context) {
         this.context = context;
@@ -80,7 +84,8 @@
 
     @Override
     public void onBindViewHolder(@NonNull ViewHolder holder, int position) {
-        final Uri uri = data.get(position);
+        final CommentedUri commentedUri = data.get(position);
+        final Uri uri = Uri.parse(commentedUri.uri());
         switch (getItemViewType(position)) {
             default:
             case ITEM_TYPE_IMAGE:
@@ -142,7 +147,28 @@
                     .placeholder(progress2)
                     .into(imageView);
             }
-        ).show();
+        ).withOverlayView(overlayView(context, uri)).show();
+    }
+
+    private View overlayView(Context context, Uri uri) {
+        try {
+            View view = LayoutInflater.from(context)
+                .inflate(R.layout.overlay_image, null, false);
+            ExifInterface exif = new ExifInterface(context.getContentResolver().openInputStream(uri));
+            Location location = new Location("const");
+            location.setLatitude(exif.getLatLong()[0]);
+            location.setLongitude(exif.getLatLong()[1]);
+            TextView text = view.findViewById(R.id.overlayImage_text);
+            text.setText(
+                new LocationString(
+                    new LocationAddress(context, location).value()
+                ).value()
+            );
+            text.append("\n");
+            return view;
+        } catch (Exception e) {
+            return null;
+        }
     }
 
     private void onBindAudio(Uri uri, ViewHolder holder) {
@@ -219,7 +245,8 @@
 
     @Override
     public int getItemViewType(int position) {
-        final Uri uri = data.get(position);
+        final CommentedUri commentedUri = data.get(position);
+        final Uri uri = Uri.parse(commentedUri.uri());
         final String mimeType = new UriMimeType(
             context,
             uri.toString()
@@ -253,7 +280,7 @@
     /**
      * Load attachments
      */
-    public void loadAttachments(List<Uri> data) {
+    public void loadAttachments(List<CommentedUri> data) {
         this.data.clear();
         this.data.addAll(data);
         notifyDataSetChanged();
@@ -262,7 +289,7 @@
     /**
      * Append an attachment to list
      */
-    public void append(Uri uri) {
+    public void append(CommentedUri uri) {
         this.data.add(uri);
         notifyItemInserted(data.size() - 1);
     }
@@ -270,7 +297,7 @@
     /**
      * Export uris
      */
-    public List<Uri> exportUri() {
+    public List<CommentedUri> exportUri() {
         return data;
     }
 }
Index: app/src/main/java/com/larryhsiao/nyx/attachments/ConstCommentUri.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/larryhsiao/nyx/attachments/ConstCommentUri.java	(date 1589561798537)
+++ app/src/main/java/com/larryhsiao/nyx/attachments/ConstCommentUri.java	(date 1589561798537)
@@ -0,0 +1,24 @@
+package com.larryhsiao.nyx.attachments;
+
+/**
+ * Constant {@link CommentedUri}.
+ */
+public class ConstCommentUri implements CommentedUri {
+    private final String uri;
+    private final String comment;
+
+    public ConstCommentUri(String uri, String comment) {
+        this.uri = uri;
+        this.comment = comment;
+    }
+
+    @Override
+    public String uri() {
+        return uri;
+    }
+
+    @Override
+    public String comment() {
+        return comment;
+    }
+}
Index: core/src/main/java/com/larryhsiao/nyx/core/attachments/WrappedAttachment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.larryhsiao.nyx.core.attachments;\r\n\r\n/**\r\n * Wrapped class of attachment\r\n */\r\npublic class WrappedAttachment implements Attachment {\r\n    private final Attachment origin;\r\n\r\n    public WrappedAttachment(Attachment origin) {\r\n        this.origin = origin;\r\n    }\r\n\r\n    @Override\r\n    public long id() {\r\n        return origin.id();\r\n    }\r\n\r\n    @Override\r\n    public long jotId() {\r\n        return origin.jotId();\r\n    }\r\n\r\n    @Override\r\n    public String uri() {\r\n        return origin.uri();\r\n    }\r\n\r\n    @Override\r\n    public int version() {\r\n        return origin.version();\r\n    }\r\n\r\n    @Override\r\n    public boolean deleted() {\r\n        return origin.deleted();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- core/src/main/java/com/larryhsiao/nyx/core/attachments/WrappedAttachment.java	(revision 3b6a0def3c3ba0cbecadeafefd952108a05ee77f)
+++ core/src/main/java/com/larryhsiao/nyx/core/attachments/WrappedAttachment.java	(date 1589560346823)
@@ -34,4 +34,9 @@
     public boolean deleted() {
         return origin.deleted();
     }
+
+    @Override
+    public String comment() {
+        return origin.comment();
+    }
 }
Index: app/src/main/java/com/larryhsiao/nyx/attachments/CommentUriAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/larryhsiao/nyx/attachments/CommentUriAdapter.java	(date 1589565289149)
+++ app/src/main/java/com/larryhsiao/nyx/attachments/CommentUriAdapter.java	(date 1589565289149)
@@ -0,0 +1,48 @@
+package com.larryhsiao.nyx.attachments;
+
+import com.google.gson.TypeAdapter;
+import com.google.gson.stream.JsonReader;
+import com.google.gson.stream.JsonToken;
+import com.google.gson.stream.JsonWriter;
+
+import java.io.IOException;
+
+/**
+ * Gson Type Adapter for Comment Uri.
+ */
+public class CommentUriAdapter extends TypeAdapter<CommentedUri> {
+    @Override
+    public void write(JsonWriter out, CommentedUri value) throws IOException {
+        out.beginObject();
+        out.name("uri").value(value.uri());
+        out.name("comment").value(value.comment());
+        out.endObject();
+    }
+
+    @Override
+    public CommentedUri read(JsonReader reader) throws IOException {
+        reader.beginObject();
+        String field = null;
+        String comment = "";
+        String uri = "";
+        while (reader.hasNext()) {
+            JsonToken token = reader.peek();
+
+            if (token.equals(JsonToken.NAME)) {
+                field = reader.nextName();
+            }
+
+            if ("uri".equals(field)) {
+                token = reader.peek();
+                uri = reader.nextString();
+            }
+
+            if ("comment".equals(field)) {
+                token = reader.peek();
+                comment = reader.nextString();
+            }
+        }
+        reader.endObject();
+        return new ConstCommentUri(uri, comment);
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/larryhsiao/nyx/base/JotFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.larryhsiao.nyx.base;\r\n\r\nimport android.os.Bundle;\r\nimport androidx.annotation.Nullable;\r\nimport com.google.firebase.remoteconfig.FirebaseRemoteConfig;\r\nimport com.larryhsiao.nyx.JotApplication;\r\nimport com.silverhetch.aura.AuraFragment;\r\nimport com.silverhetch.clotho.Source;\r\n\r\nimport java.sql.Connection;\r\n\r\n/**\r\n * Base fragment for Jot\r\n */\r\npublic abstract class JotFragment extends AuraFragment {\r\n    protected Source<Connection> db;\r\n    protected FirebaseRemoteConfig remoteConfig;\r\n\r\n    @Override\r\n    public void onCreate(@Nullable Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        db = ((JotApplication) getContext().getApplicationContext()).db;\r\n        remoteConfig = ((JotApplication) getContext().getApplicationContext()).remoteConfig;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/larryhsiao/nyx/base/JotFragment.java	(revision 3b6a0def3c3ba0cbecadeafefd952108a05ee77f)
+++ app/src/main/java/com/larryhsiao/nyx/base/JotFragment.java	(date 1589564622991)
@@ -3,6 +3,7 @@
 import android.os.Bundle;
 import androidx.annotation.Nullable;
 import com.google.firebase.remoteconfig.FirebaseRemoteConfig;
+import com.google.gson.Gson;
 import com.larryhsiao.nyx.JotApplication;
 import com.silverhetch.aura.AuraFragment;
 import com.silverhetch.clotho.Source;
@@ -15,11 +16,14 @@
 public abstract class JotFragment extends AuraFragment {
     protected Source<Connection> db;
     protected FirebaseRemoteConfig remoteConfig;
+    protected Gson gson;
 
     @Override
     public void onCreate(@Nullable Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        db = ((JotApplication) getContext().getApplicationContext()).db;
+        JotApplication app = ((JotApplication) getContext().getApplicationContext());
+        gson = app.gson;
+        db = app.db;
         remoteConfig = ((JotApplication) getContext().getApplicationContext()).remoteConfig;
     }
 }
Index: app/src/main/java/com/larryhsiao/nyx/base/JotActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.larryhsiao.nyx.base;\r\n\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.core.hardware.fingerprint.FingerprintManagerCompat;\r\nimport com.google.firebase.remoteconfig.FirebaseRemoteConfig;\r\nimport com.larryhsiao.nyx.JotApplication;\r\nimport com.silverhetch.aura.AuraActivity;\r\nimport com.silverhetch.aura.fingerprint.Fingerprint;\r\nimport com.silverhetch.aura.fingerprint.FingerprintImpl;\r\nimport com.silverhetch.clotho.Source;\r\nimport com.silverhetch.clotho.storage.MemoryCeres;\r\n\r\nimport java.sql.Connection;\r\n\r\n/**\r\n * Activity for Jot.\r\n */\r\npublic abstract class JotActivity extends AuraActivity {\r\n    protected Source<Connection> db;\r\n    protected FirebaseRemoteConfig remoteConfig;\r\n\r\n    @Override\r\n    protected void onCreate(@Nullable Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        JotApplication app = ((JotApplication) getApplicationContext());\r\n        db = app.db;\r\n        remoteConfig = app.remoteConfig;\r\n        remoteConfig.fetchAndActivate();\r\n    }\r\n\r\n    @Override\r\n    protected void onResume() {\r\n        super.onResume();\r\n        Fingerprint fingerprint = new FingerprintImpl(\r\n            FingerprintManagerCompat.from(this), new MemoryCeres()\r\n        );\r\n        fingerprint.enable(true); // enabled by default\r\n        JotApplication app = (JotApplication) getApplicationContext();\r\n        if (fingerprint.isEnabled() && 300000 < System.currentTimeMillis() - app.lastAuthed) {\r\n            Intent intent = new Intent(this, AuthActivity.class);\r\n            startActivity(intent);\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/larryhsiao/nyx/base/JotActivity.java	(revision 3b6a0def3c3ba0cbecadeafefd952108a05ee77f)
+++ app/src/main/java/com/larryhsiao/nyx/base/JotActivity.java	(date 1589564622983)
@@ -5,6 +5,7 @@
 import androidx.annotation.Nullable;
 import androidx.core.hardware.fingerprint.FingerprintManagerCompat;
 import com.google.firebase.remoteconfig.FirebaseRemoteConfig;
+import com.google.gson.Gson;
 import com.larryhsiao.nyx.JotApplication;
 import com.silverhetch.aura.AuraActivity;
 import com.silverhetch.aura.fingerprint.Fingerprint;
@@ -20,11 +21,13 @@
 public abstract class JotActivity extends AuraActivity {
     protected Source<Connection> db;
     protected FirebaseRemoteConfig remoteConfig;
+    protected Gson gson;
 
     @Override
     protected void onCreate(@Nullable Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         JotApplication app = ((JotApplication) getApplicationContext());
+        gson = app.gson;
         db = app.db;
         remoteConfig = app.remoteConfig;
         remoteConfig.fetchAndActivate();
Index: app/src/main/java/com/larryhsiao/nyx/sync/SyncAttachments.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.larryhsiao.nyx.sync;\r\n\r\nimport android.content.Context;\r\nimport com.google.firebase.firestore.CollectionReference;\r\nimport com.google.firebase.firestore.FirebaseFirestore;\r\nimport com.google.firebase.firestore.QueryDocumentSnapshot;\r\nimport com.google.firebase.firestore.QuerySnapshot;\r\nimport com.larryhsiao.nyx.core.attachments.AllAttachments;\r\nimport com.larryhsiao.nyx.core.attachments.Attachment;\r\nimport com.larryhsiao.nyx.core.attachments.ConstAttachment;\r\nimport com.larryhsiao.nyx.core.attachments.NewAttachmentById;\r\nimport com.larryhsiao.nyx.core.attachments.QueriedAttachments;\r\nimport com.larryhsiao.nyx.core.attachments.UpdateAttachment;\r\nimport com.silverhetch.clotho.Action;\r\nimport com.silverhetch.clotho.Source;\r\n\r\nimport java.sql.Connection;\r\nimport java.util.HashMap;\r\nimport java.util.Iterator;\r\nimport java.util.Map;\r\nimport java.util.stream.Collectors;\r\n\r\n/**\r\n * Action to sync attachments.\r\n */\r\npublic class SyncAttachments implements Action {\r\n    private final Context context;\r\n    private final String uid;\r\n    private final Source<Connection> db;\r\n\r\n    public SyncAttachments(Context context, String uid, Source<Connection> db) {\r\n        this.context = context;\r\n        this.uid = uid;\r\n        this.db = db;\r\n    }\r\n\r\n    @Override\r\n    public void fire() {\r\n        CollectionReference remoteDb = FirebaseFirestore.getInstance()\r\n            .collection(uid + \"/data/attachments\");\r\n        remoteDb.get().addOnCompleteListener(task -> {\r\n            if (task.isSuccessful()) {\r\n                sync(remoteDb, task.getResult());\r\n            }\r\n        });\r\n    }\r\n\r\n    private void sync(CollectionReference remoteDb, QuerySnapshot result) {\r\n        Map<Long, Attachment> dbItems = new QueriedAttachments(\r\n            new AllAttachments(db, true)\r\n        ).value().stream().collect(Collectors.toMap(Attachment::id, attachment -> attachment));\r\n        for (QueryDocumentSnapshot remoteItem : result) {\r\n            final Attachment dbItem = dbItems.get(Long.valueOf(remoteItem.getId()));\r\n            if (dbItem == null) {\r\n                newLocalItem(remoteItem);\r\n            } else {\r\n                long remoteVersion = remoteItem.getLong(\"version\");\r\n                if (dbItem.version() < remoteVersion) {\r\n                    updateLocalItem(remoteItem);\r\n                    dbItems.remove(dbItem.id());\r\n                } else if (dbItem.version() == remoteVersion) {\r\n                    dbItems.remove(dbItem.id());\r\n                }\r\n            }\r\n        }\r\n        // new Items or local version is newer\r\n        updateRemoteItem(remoteDb, dbItems.values().iterator());\r\n    }\r\n\r\n    private void updateLocalItem(QueryDocumentSnapshot remoteItem) {\r\n        new UpdateAttachment(\r\n            db,\r\n            new ConstAttachment(\r\n                Long.parseLong(remoteItem.getId()),\r\n                remoteItem.getLong(\"jot_id\"),\r\n                remoteItem.getString(\"uri\"),\r\n                remoteItem.getLong(\"version\").intValue(),\r\n                remoteItem.getLong(\"delete\").intValue()\r\n            ), false\r\n        ).fire();\r\n    }\r\n\r\n    private void newLocalItem(QueryDocumentSnapshot remoteItem) {\r\n        new NewAttachmentById(\r\n            db,\r\n            new ConstAttachment(\r\n                Long.parseLong(remoteItem.getId()),\r\n                remoteItem.getLong(\"jot_id\"),\r\n                remoteItem.getString(\"uri\"),\r\n                remoteItem.getLong(\"version\").intValue(),\r\n                remoteItem.getLong(\"delete\").intValue()\r\n            )\r\n        ).fire();\r\n    }\r\n\r\n    private void updateRemoteItem(CollectionReference remoteDb, Iterator<Attachment> iterator) {\r\n        if (!iterator.hasNext()) {\r\n            new LocalFileSync(context, db, integer -> null).fire(); // for deleted items\r\n            new RemoteFileSync(context, db, uid).fire();\r\n            return;\r\n        }\r\n        Attachment attachment = iterator.next();\r\n        Map<String, Object> data = new HashMap<>();\r\n        data.put(\"delete\", attachment.deleted() ? 1 : 0);\r\n        data.put(\"version\", attachment.version());\r\n        data.put(\"jot_id\", attachment.jotId());\r\n        data.put(\"uri\", attachment.uri());\r\n        remoteDb.document(attachment.id() + \"\")\r\n            .set(data)\r\n            .addOnCompleteListener(it -> {\r\n                updateRemoteItem(remoteDb, iterator);\r\n            });\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/larryhsiao/nyx/sync/SyncAttachments.java	(revision 3b6a0def3c3ba0cbecadeafefd952108a05ee77f)
+++ app/src/main/java/com/larryhsiao/nyx/sync/SyncAttachments.java	(date 1589562589477)
@@ -75,8 +75,8 @@
                 remoteItem.getLong("jot_id"),
                 remoteItem.getString("uri"),
                 remoteItem.getLong("version").intValue(),
-                remoteItem.getLong("delete").intValue()
-            ), false
+                remoteItem.getLong("delete").intValue(),
+                remoteItem.getString("comment")), false
         ).fire();
     }
 
@@ -88,8 +88,8 @@
                 remoteItem.getLong("jot_id"),
                 remoteItem.getString("uri"),
                 remoteItem.getLong("version").intValue(),
-                remoteItem.getLong("delete").intValue()
-            )
+                remoteItem.getLong("delete").intValue(),
+                remoteItem.getString("comment"))
         ).fire();
     }
 
@@ -105,6 +105,7 @@
         data.put("version", attachment.version());
         data.put("jot_id", attachment.jotId());
         data.put("uri", attachment.uri());
+        data.put("comment", attachment.comment());
         remoteDb.document(attachment.id() + "")
             .set(data)
             .addOnCompleteListener(it -> {
Index: app/src/main/java/com/larryhsiao/nyx/attachments/CommentedUri.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/larryhsiao/nyx/attachments/CommentedUri.java	(date 1589561798533)
+++ app/src/main/java/com/larryhsiao/nyx/attachments/CommentedUri.java	(date 1589561798533)
@@ -0,0 +1,16 @@
+package com.larryhsiao.nyx.attachments;
+
+/**
+ * DTO object which have uri and comment.
+ */
+public interface CommentedUri {
+    /**
+     * The attachment Uri.
+     */
+    String uri();
+
+    /**
+     * Comment of this attachment.
+     */
+    String comment();
+}
Index: core/src/main/java/com/larryhsiao/nyx/core/NyxDb.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.larryhsiao.nyx.core;\r\n\r\nimport com.larryhsiao.nyx.core.attachments.AttachmentDb;\r\nimport com.larryhsiao.nyx.core.jots.JotsDb;\r\nimport com.larryhsiao.nyx.core.tags.TagDb;\r\nimport com.silverhetch.clotho.Source;\r\nimport com.silverhetch.clotho.database.h2.EmbedH2Conn;\r\nimport com.silverhetch.clotho.source.ConstSource;\r\nimport org.flywaydb.core.Flyway;\r\n\r\nimport java.io.File;\r\nimport java.sql.Connection;\r\n\r\n/**\r\n * Source to build db connection for Nyx.\r\n */\r\npublic class NyxDb implements Source<Connection> {\r\n    private final File dbFile;\r\n\r\n    public NyxDb(File dbFile) {\r\n        this.dbFile = dbFile;\r\n    }\r\n\r\n    @Override\r\n    public Connection value() {\r\n        try {\r\n            Class.forName(\"org.h2.Driver\");\r\n        } catch (ClassNotFoundException e) {\r\n            e.printStackTrace();\r\n        }\r\n        final Connection conn = new AttachmentDb(\r\n            new TagDb(\r\n                new JotsDb(\r\n                    new EmbedH2Conn(\r\n                        new ConstSource<>(dbFile)\r\n                    )\r\n                )\r\n            )\r\n        ).value();\r\n        Flyway flyway = Flyway.configure()\r\n            .baselineOnMigrate(true)\r\n            .baselineVersion(\"3\")\r\n            .dataSource(\"jdbc:h2:\" +\r\n                    dbFile.getAbsolutePath() +\r\n                    \";FILE_LOCK=FS\" +\r\n                    \";PAGE_SIZE=1024\" +\r\n                    \";CACHE_SIZE=8192\",\r\n                null,\r\n                null\r\n            ).load();\r\n        flyway.migrate();\r\n        return conn;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- core/src/main/java/com/larryhsiao/nyx/core/NyxDb.java	(revision 3b6a0def3c3ba0cbecadeafefd952108a05ee77f)
+++ core/src/main/java/com/larryhsiao/nyx/core/NyxDb.java	(date 1589606061666)
@@ -39,7 +39,7 @@
         ).value();
         Flyway flyway = Flyway.configure()
             .baselineOnMigrate(true)
-            .baselineVersion("3")
+            .baselineVersion("4")
             .dataSource("jdbc:h2:" +
                     dbFile.getAbsolutePath() +
                     ";FILE_LOCK=FS" +
